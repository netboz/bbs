%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.12.0
-module(shape_service_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_eGem.shape_type'/1, 'enum_value_by_symbol_eGem.shape_type'/1]).
-export(['enum_symbol_by_value_eGem.m_primitive_type'/1, 'enum_value_by_symbol_eGem.m_primitive_type'/1]).
-export(['enum_symbol_by_value_eGem.m_mesh_source'/1, 'enum_value_by_symbol_eGem.m_mesh_source'/1]).
-export(['enum_symbol_by_value_generic_result_code.enum_generic_result_code'/1, 'enum_value_by_symbol_generic_result_code.enum_generic_result_code'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'eGem.shape_type'() :: primitive | mesh.
-type 'eGem.m_primitive_type'() :: sphere | box.
-type 'eGem.m_mesh_source'() :: asset_processor | file | url.
-type 'generic_result_code.enum_generic_result_code'() :: ok | failed | not_found | invalid_parameter | unimplemented | deactivate_first | activate_first | entity_not_initialised | component_already_exists.
-export_type(['eGem.shape_type'/0, 'eGem.m_primitive_type'/0, 'eGem.m_mesh_source'/0, 'generic_result_code.enum_generic_result_code'/0]).

%% message types
-type m_mesh_parameters() ::
      #{mesh_source             => asset_processor | file | url | integer(), % = 1, enum eGem.m_mesh_source
        mesh_location           => iodata()         % = 2
       }.

-type m_primitive_box_parameters() ::
      #{corner_1                => vector_3(),      % = 1
        corner_2                => vector_3()       % = 2
       }.

-type m_primitive_sphere_parameters() ::
      #{radius                  => float() | integer() | infinity | '-infinity' | nan % = 1
       }.

-type m_primitive_parameters_message() ::
      #{primitive_type          => sphere | box | integer(), % = 1, enum eGem.m_primitive_type
        primitive_parameters    => {primitive_box_parameters, m_primitive_box_parameters()} | {primitive_sphere_parameters, m_primitive_sphere_parameters()} % oneof
       }.

-type add_shape_component_parameters() ::
      #{entity_id               => non_neg_integer(), % = 1, 64 bits
        type                    => primitive | mesh | integer(), % = 2, enum eGem.shape_type
        parameters              => {mesh_parameters, m_mesh_parameters()} | {primitive_parameters, m_primitive_parameters_message()} % oneof
       }.

-type m_entity_id() ::
      #{entity_id               => non_neg_integer() % = 1, 64 bits
       }.

-type generic_result_code() ::
      #{result_code             => ok | failed | not_found | invalid_parameter | unimplemented | deactivate_first | activate_first | entity_not_initialised | component_already_exists | integer() % = 1, enum generic_result_code.enum_generic_result_code
       }.

-type vector_3() ::
      #{x                       => float() | integer() | infinity | '-infinity' | nan, % = 1
        y                       => float() | integer() | infinity | '-infinity' | nan, % = 2
        z                       => float() | integer() | infinity | '-infinity' | nan % = 3
       }.

-type vector_4() ::
      #{w                       => float() | integer() | infinity | '-infinity' | nan, % = 1
        x                       => float() | integer() | infinity | '-infinity' | nan, % = 2
        y                       => float() | integer() | infinity | '-infinity' | nan, % = 3
        z                       => float() | integer() | infinity | '-infinity' | nan % = 4
       }.

-export_type(['m_mesh_parameters'/0, 'm_primitive_box_parameters'/0, 'm_primitive_sphere_parameters'/0, 'm_primitive_parameters_message'/0, 'add_shape_component_parameters'/0, 'm_entity_id'/0, 'generic_result_code'/0, 'vector_3'/0, 'vector_4'/0]).

-spec encode_msg(m_mesh_parameters() | m_primitive_box_parameters() | m_primitive_sphere_parameters() | m_primitive_parameters_message() | add_shape_component_parameters() | m_entity_id() | generic_result_code() | vector_3() | vector_4(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg(m_mesh_parameters() | m_primitive_box_parameters() | m_primitive_sphere_parameters() | m_primitive_parameters_message() | add_shape_component_parameters() | m_entity_id() | generic_result_code() | vector_3() | vector_4(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_mesh_parameters -> encode_msg_m_mesh_parameters(id(Msg, TrUserData), TrUserData);
      m_primitive_box_parameters -> encode_msg_m_primitive_box_parameters(id(Msg, TrUserData), TrUserData);
      m_primitive_sphere_parameters -> encode_msg_m_primitive_sphere_parameters(id(Msg, TrUserData), TrUserData);
      m_primitive_parameters_message -> encode_msg_m_primitive_parameters_message(id(Msg, TrUserData), TrUserData);
      add_shape_component_parameters -> encode_msg_add_shape_component_parameters(id(Msg, TrUserData), TrUserData);
      m_entity_id -> encode_msg_m_entity_id(id(Msg, TrUserData), TrUserData);
      generic_result_code -> encode_msg_generic_result_code(id(Msg, TrUserData), TrUserData);
      vector_3 -> encode_msg_vector_3(id(Msg, TrUserData), TrUserData);
      vector_4 -> encode_msg_vector_4(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_m_mesh_parameters(Msg, TrUserData) -> encode_msg_m_mesh_parameters(Msg, <<>>, TrUserData).


encode_msg_m_mesh_parameters(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{mesh_source := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= asset_processor; TrF1 =:= 0 -> Bin;
		    true -> 'e_enum_eGem.m_mesh_source'(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{mesh_location := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_m_primitive_box_parameters(Msg, TrUserData) -> encode_msg_m_primitive_box_parameters(Msg, <<>>, TrUserData).


encode_msg_m_primitive_box_parameters(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{corner_1 := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true -> e_mfield_m_primitive_box_parameters_corner_1(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{corner_2 := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true -> e_mfield_m_primitive_box_parameters_corner_2(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_m_primitive_sphere_parameters(Msg, TrUserData) -> encode_msg_m_primitive_sphere_parameters(Msg, <<>>, TrUserData).


encode_msg_m_primitive_sphere_parameters(#{} = M, Bin, TrUserData) ->
    case M of
      #{radius := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true -> e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_m_primitive_parameters_message(Msg, TrUserData) -> encode_msg_m_primitive_parameters_message(Msg, <<>>, TrUserData).


encode_msg_m_primitive_parameters_message(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{primitive_type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= sphere; TrF1 =:= 0 -> Bin;
		    true -> 'e_enum_eGem.m_primitive_type'(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{primitive_parameters := F2} ->
	  case id(F2, TrUserData) of
	    {primitive_box_parameters, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_m_primitive_parameters_message_primitive_box_parameters(TrTF2, <<B1/binary, 18>>, TrUserData) end;
	    {primitive_sphere_parameters, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_m_primitive_parameters_message_primitive_sphere_parameters(TrTF2, <<B1/binary, 26>>, TrUserData) end
	  end;
      _ -> B1
    end.

encode_msg_add_shape_component_parameters(Msg, TrUserData) -> encode_msg_add_shape_component_parameters(Msg, <<>>, TrUserData).


encode_msg_add_shape_component_parameters(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{entity_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{type := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= primitive; TrF2 =:= 0 -> B1;
		    true -> 'e_enum_eGem.shape_type'(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{parameters := F3} ->
	  case id(F3, TrUserData) of
	    {mesh_parameters, TF3} -> begin TrTF3 = id(TF3, TrUserData), e_mfield_add_shape_component_parameters_mesh_parameters(TrTF3, <<B2/binary, 250, 1>>, TrUserData) end;
	    {primitive_parameters, TF3} -> begin TrTF3 = id(TF3, TrUserData), e_mfield_add_shape_component_parameters_primitive_parameters(TrTF3, <<B2/binary, 130, 2>>, TrUserData) end
	  end;
      _ -> B2
    end.

encode_msg_m_entity_id(Msg, TrUserData) -> encode_msg_m_entity_id(Msg, <<>>, TrUserData).


encode_msg_m_entity_id(#{} = M, Bin, TrUserData) ->
    case M of
      #{entity_id := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_generic_result_code(Msg, TrUserData) -> encode_msg_generic_result_code(Msg, <<>>, TrUserData).


encode_msg_generic_result_code(#{} = M, Bin, TrUserData) ->
    case M of
      #{result_code := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= ok; TrF1 =:= 0 -> Bin;
	       true -> 'e_enum_generic_result_code.enum_generic_result_code'(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_vector_3(Msg, TrUserData) -> encode_msg_vector_3(Msg, <<>>, TrUserData).


encode_msg_vector_3(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{x := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0.0 -> Bin;
		    true -> e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{y := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0.0 -> B1;
		    true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{z := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0.0 -> B2;
	       true -> e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_vector_4(Msg, TrUserData) -> encode_msg_vector_4(Msg, <<>>, TrUserData).


encode_msg_vector_4(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{w := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0.0 -> Bin;
		    true -> e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{x := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0.0 -> B1;
		    true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{y := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0.0 -> B2;
		    true -> e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{z := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= 0.0 -> B3;
	       true -> e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

e_mfield_m_primitive_box_parameters_corner_1(Msg, Bin, TrUserData) -> SubBin = encode_msg_vector_3(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_m_primitive_box_parameters_corner_2(Msg, Bin, TrUserData) -> SubBin = encode_msg_vector_3(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_m_primitive_parameters_message_primitive_box_parameters(Msg, Bin, TrUserData) -> SubBin = encode_msg_m_primitive_box_parameters(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_m_primitive_parameters_message_primitive_sphere_parameters(Msg, Bin, TrUserData) -> SubBin = encode_msg_m_primitive_sphere_parameters(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_add_shape_component_parameters_mesh_parameters(Msg, Bin, TrUserData) -> SubBin = encode_msg_m_mesh_parameters(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_add_shape_component_parameters_primitive_parameters(Msg, Bin, TrUserData) -> SubBin = encode_msg_m_primitive_parameters_message(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

'e_enum_eGem.shape_type'(primitive, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_eGem.shape_type'(mesh, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_eGem.shape_type'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_eGem.m_primitive_type'(sphere, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_eGem.m_primitive_type'(box, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_eGem.m_primitive_type'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_eGem.m_mesh_source'(asset_processor, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_eGem.m_mesh_source'(file, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_eGem.m_mesh_source'(url, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_eGem.m_mesh_source'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_generic_result_code.enum_generic_result_code'(ok, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_generic_result_code.enum_generic_result_code'(failed, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_generic_result_code.enum_generic_result_code'(not_found, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_generic_result_code.enum_generic_result_code'(invalid_parameter, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_generic_result_code.enum_generic_result_code'(unimplemented, Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_generic_result_code.enum_generic_result_code'(deactivate_first, Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_generic_result_code.enum_generic_result_code'(activate_first, Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_generic_result_code.enum_generic_result_code'(entity_not_initialised, Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_generic_result_code.enum_generic_result_code'(component_already_exists, Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_generic_result_code.enum_generic_result_code'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) -> Utf8 = unicode:characters_to_binary(S), Bin2 = e_varint(byte_size(Utf8), Bin), <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) -> Bin2 = e_varint(byte_size(Bytes), Bin), <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) -> BytesBin = iolist_to_binary(Bytes), Bin2 = e_varint(byte_size(BytesBin), Bin), <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) -> Bin2 = <<Bin/binary, (N band 127 bor 128)>>, e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) -> TrUserData = proplists:get_value(user_data, Opts), decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_mesh_parameters, Bin, TrUserData) -> id(decode_msg_m_mesh_parameters(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_primitive_box_parameters, Bin, TrUserData) -> id(decode_msg_m_primitive_box_parameters(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_primitive_sphere_parameters, Bin, TrUserData) -> id(decode_msg_m_primitive_sphere_parameters(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_primitive_parameters_message, Bin, TrUserData) -> id(decode_msg_m_primitive_parameters_message(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_shape_component_parameters, Bin, TrUserData) -> id(decode_msg_add_shape_component_parameters(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_entity_id, Bin, TrUserData) -> id(decode_msg_m_entity_id(Bin, TrUserData), TrUserData);
decode_msg_2_doit(generic_result_code, Bin, TrUserData) -> id(decode_msg_generic_result_code(Bin, TrUserData), TrUserData);
decode_msg_2_doit(vector_3, Bin, TrUserData) -> id(decode_msg_vector_3(Bin, TrUserData), TrUserData);
decode_msg_2_doit(vector_4, Bin, TrUserData) -> id(decode_msg_vector_4(Bin, TrUserData), TrUserData).



decode_msg_m_mesh_parameters(Bin, TrUserData) -> dfp_read_field_def_m_mesh_parameters(Bin, 0, 0, id(asset_processor, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_m_mesh_parameters(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_m_mesh_parameters_mesh_source(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_mesh_parameters(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_m_mesh_parameters_mesh_location(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_mesh_parameters(<<>>, 0, 0, F@_1, F@_2, _) -> #{mesh_source => F@_1, mesh_location => F@_2};
dfp_read_field_def_m_mesh_parameters(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_m_mesh_parameters(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_mesh_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_m_mesh_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_mesh_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_m_mesh_parameters_mesh_source(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_m_mesh_parameters_mesh_location(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_m_mesh_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_m_mesh_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_m_mesh_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_m_mesh_parameters(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_m_mesh_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_mesh_parameters(<<>>, 0, 0, F@_1, F@_2, _) -> #{mesh_source => F@_1, mesh_location => F@_2}.

d_field_m_mesh_parameters_mesh_source(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_m_mesh_parameters_mesh_source(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_mesh_parameters_mesh_source(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_eGem.m_mesh_source'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_m_mesh_parameters(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_m_mesh_parameters_mesh_location(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_m_mesh_parameters_mesh_location(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_mesh_parameters_mesh_location(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_m_mesh_parameters(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_m_mesh_parameters(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_m_mesh_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_m_mesh_parameters(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_mesh_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_mesh_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_m_mesh_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_m_mesh_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_m_mesh_parameters(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_m_mesh_parameters(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_m_mesh_parameters(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_m_mesh_parameters(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_mesh_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_m_mesh_parameters(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_mesh_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_m_primitive_box_parameters(Bin, TrUserData) -> dfp_read_field_def_m_primitive_box_parameters(Bin, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_m_primitive_box_parameters(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_m_primitive_box_parameters_corner_1(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_primitive_box_parameters(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_m_primitive_box_parameters_corner_2(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_primitive_box_parameters(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{corner_1 => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{corner_2 => F@_2}
    end;
dfp_read_field_def_m_primitive_box_parameters(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_m_primitive_box_parameters(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_primitive_box_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_m_primitive_box_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_primitive_box_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_m_primitive_box_parameters_corner_1(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_m_primitive_box_parameters_corner_2(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_m_primitive_box_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_m_primitive_box_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_m_primitive_box_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_m_primitive_box_parameters(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_m_primitive_box_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_primitive_box_parameters(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{corner_1 => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{corner_2 => F@_2}
    end.

d_field_m_primitive_box_parameters_corner_1(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_m_primitive_box_parameters_corner_1(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_primitive_box_parameters_corner_1(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_vector_3(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_m_primitive_box_parameters(RestF, 0, 0,
						  if Prev == '$undef' -> NewFValue;
						     true -> merge_msg_vector_3(Prev, NewFValue, TrUserData)
						  end,
						  F@_2, TrUserData).

d_field_m_primitive_box_parameters_corner_2(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_m_primitive_box_parameters_corner_2(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_primitive_box_parameters_corner_2(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_vector_3(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_m_primitive_box_parameters(RestF, 0, 0, F@_1,
						  if Prev == '$undef' -> NewFValue;
						     true -> merge_msg_vector_3(Prev, NewFValue, TrUserData)
						  end,
						  TrUserData).

skip_varint_m_primitive_box_parameters(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_m_primitive_box_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_m_primitive_box_parameters(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_primitive_box_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_primitive_box_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_m_primitive_box_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_m_primitive_box_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_m_primitive_box_parameters(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_m_primitive_box_parameters(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_m_primitive_box_parameters(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_m_primitive_box_parameters(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_primitive_box_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_m_primitive_box_parameters(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_primitive_box_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_m_primitive_sphere_parameters(Bin, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Bin, 0, 0, id(0.0, TrUserData), TrUserData).

dfp_read_field_def_m_primitive_sphere_parameters(<<13, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_m_primitive_sphere_parameters_radius(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_m_primitive_sphere_parameters(<<>>, 0, 0, F@_1, _) -> #{radius => F@_1};
dfp_read_field_def_m_primitive_sphere_parameters(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_m_primitive_sphere_parameters(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_primitive_sphere_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_m_primitive_sphere_parameters(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_primitive_sphere_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 -> d_field_m_primitive_sphere_parameters_radius(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_m_primitive_sphere_parameters(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_m_primitive_sphere_parameters(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_m_primitive_sphere_parameters(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_m_primitive_sphere_parameters(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_m_primitive_sphere_parameters(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_primitive_sphere_parameters(<<>>, 0, 0, F@_1, _) -> #{radius => F@_1}.

d_field_m_primitive_sphere_parameters_radius(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, _, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Rest, Z1, Z2, id(infinity, TrUserData), TrUserData);
d_field_m_primitive_sphere_parameters_radius(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, _, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Rest, Z1, Z2, id('-infinity', TrUserData), TrUserData);
d_field_m_primitive_sphere_parameters_radius(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, _, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Rest, Z1, Z2, id(nan, TrUserData), TrUserData);
d_field_m_primitive_sphere_parameters_radius(<<Value:32/little-float, Rest/binary>>, Z1, Z2, _, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Rest, Z1, Z2, id(Value, TrUserData), TrUserData).

skip_varint_m_primitive_sphere_parameters(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_m_primitive_sphere_parameters(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_m_primitive_sphere_parameters(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_primitive_sphere_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_m_primitive_sphere_parameters(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_primitive_sphere_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_m_primitive_sphere_parameters(Rest2, 0, 0, F@_1, TrUserData).

skip_group_m_primitive_sphere_parameters(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_m_primitive_sphere_parameters(Rest, 0, Z2, F@_1, TrUserData).

skip_32_m_primitive_sphere_parameters(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_m_primitive_sphere_parameters(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_primitive_sphere_parameters(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_m_primitive_parameters_message(Bin, TrUserData) -> dfp_read_field_def_m_primitive_parameters_message(Bin, 0, 0, id(sphere, TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_m_primitive_parameters_message(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_m_primitive_parameters_message_primitive_type(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_primitive_parameters_message(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_m_primitive_parameters_message_primitive_box_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_primitive_parameters_message(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_m_primitive_parameters_message_primitive_sphere_parameters(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_primitive_parameters_message(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{primitive_type => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{primitive_parameters => F@_2}
    end;
dfp_read_field_def_m_primitive_parameters_message(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_m_primitive_parameters_message(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_primitive_parameters_message(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_m_primitive_parameters_message(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_primitive_parameters_message(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_m_primitive_parameters_message_primitive_type(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_m_primitive_parameters_message_primitive_box_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
      26 -> d_field_m_primitive_parameters_message_primitive_sphere_parameters(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_m_primitive_parameters_message(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_m_primitive_parameters_message(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_m_primitive_parameters_message(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_m_primitive_parameters_message(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_m_primitive_parameters_message(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_primitive_parameters_message(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{primitive_type => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{primitive_parameters => F@_2}
    end.

d_field_m_primitive_parameters_message_primitive_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_m_primitive_parameters_message_primitive_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_primitive_parameters_message_primitive_type(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_eGem.m_primitive_type'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_m_primitive_parameters_message(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_m_primitive_parameters_message_primitive_box_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 ->
    d_field_m_primitive_parameters_message_primitive_box_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_primitive_parameters_message_primitive_box_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_m_primitive_box_parameters(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_m_primitive_parameters_message(RestF, 0, 0, F@_1,
						      case Prev of
							'$undef' -> id({primitive_box_parameters, NewFValue}, TrUserData);
							{primitive_box_parameters, MVPrev} -> id({primitive_box_parameters, merge_msg_m_primitive_box_parameters(MVPrev, NewFValue, TrUserData)}, TrUserData);
							_ -> id({primitive_box_parameters, NewFValue}, TrUserData)
						      end,
						      TrUserData).

d_field_m_primitive_parameters_message_primitive_sphere_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 ->
    d_field_m_primitive_parameters_message_primitive_sphere_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_primitive_parameters_message_primitive_sphere_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_m_primitive_sphere_parameters(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_m_primitive_parameters_message(RestF, 0, 0, F@_1,
						      case Prev of
							'$undef' -> id({primitive_sphere_parameters, NewFValue}, TrUserData);
							{primitive_sphere_parameters, MVPrev} -> id({primitive_sphere_parameters, merge_msg_m_primitive_sphere_parameters(MVPrev, NewFValue, TrUserData)}, TrUserData);
							_ -> id({primitive_sphere_parameters, NewFValue}, TrUserData)
						      end,
						      TrUserData).

skip_varint_m_primitive_parameters_message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_m_primitive_parameters_message(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_m_primitive_parameters_message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_primitive_parameters_message(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_primitive_parameters_message(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_m_primitive_parameters_message(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_m_primitive_parameters_message(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_m_primitive_parameters_message(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_m_primitive_parameters_message(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_m_primitive_parameters_message(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_m_primitive_parameters_message(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_primitive_parameters_message(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_m_primitive_parameters_message(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_m_primitive_parameters_message(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_add_shape_component_parameters(Bin, TrUserData) -> dfp_read_field_def_add_shape_component_parameters(Bin, 0, 0, id(0, TrUserData), id(primitive, TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_add_shape_component_parameters(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_add_shape_component_parameters_entity_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_add_shape_component_parameters(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_add_shape_component_parameters_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_add_shape_component_parameters(<<250, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_add_shape_component_parameters_mesh_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_add_shape_component_parameters(<<130, 2, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_add_shape_component_parameters_primitive_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_add_shape_component_parameters(<<>>, 0, 0, F@_1, F@_2, F@_3, _) ->
    S1 = #{entity_id => F@_1, type => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{parameters => F@_3}
    end;
dfp_read_field_def_add_shape_component_parameters(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_add_shape_component_parameters(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_add_shape_component_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_add_shape_component_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_add_shape_component_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_add_shape_component_parameters_entity_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      16 -> d_field_add_shape_component_parameters_type(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      250 -> d_field_add_shape_component_parameters_mesh_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      258 -> d_field_add_shape_component_parameters_primitive_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_add_shape_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_add_shape_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_add_shape_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_add_shape_component_parameters(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_add_shape_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_add_shape_component_parameters(<<>>, 0, 0, F@_1, F@_2, F@_3, _) ->
    S1 = #{entity_id => F@_1, type => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{parameters => F@_3}
    end.

d_field_add_shape_component_parameters_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_add_shape_component_parameters_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_add_shape_component_parameters_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest}, dfp_read_field_def_add_shape_component_parameters(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_add_shape_component_parameters_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_add_shape_component_parameters_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_add_shape_component_parameters_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_eGem.shape_type'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_add_shape_component_parameters(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_add_shape_component_parameters_mesh_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_add_shape_component_parameters_mesh_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_add_shape_component_parameters_mesh_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_m_mesh_parameters(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_add_shape_component_parameters(RestF, 0, 0, F@_1, F@_2,
						      case Prev of
							'$undef' -> id({mesh_parameters, NewFValue}, TrUserData);
							{mesh_parameters, MVPrev} -> id({mesh_parameters, merge_msg_m_mesh_parameters(MVPrev, NewFValue, TrUserData)}, TrUserData);
							_ -> id({mesh_parameters, NewFValue}, TrUserData)
						      end,
						      TrUserData).

d_field_add_shape_component_parameters_primitive_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 ->
    d_field_add_shape_component_parameters_primitive_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_add_shape_component_parameters_primitive_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_m_primitive_parameters_message(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_add_shape_component_parameters(RestF, 0, 0, F@_1, F@_2,
						      case Prev of
							'$undef' -> id({primitive_parameters, NewFValue}, TrUserData);
							{primitive_parameters, MVPrev} -> id({primitive_parameters, merge_msg_m_primitive_parameters_message(MVPrev, NewFValue, TrUserData)}, TrUserData);
							_ -> id({primitive_parameters, NewFValue}, TrUserData)
						      end,
						      TrUserData).

skip_varint_add_shape_component_parameters(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_add_shape_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_add_shape_component_parameters(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_add_shape_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_add_shape_component_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_add_shape_component_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_add_shape_component_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_add_shape_component_parameters(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_add_shape_component_parameters(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_add_shape_component_parameters(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_add_shape_component_parameters(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_add_shape_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_add_shape_component_parameters(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_add_shape_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_entity_id(Bin, TrUserData) -> dfp_read_field_def_m_entity_id(Bin, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_m_entity_id(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_m_entity_id_entity_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_m_entity_id(<<>>, 0, 0, F@_1, _) -> #{entity_id => F@_1};
dfp_read_field_def_m_entity_id(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_m_entity_id(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_m_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_m_entity_id_entity_id(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_m_entity_id(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_m_entity_id(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_m_entity_id(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_m_entity_id(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_m_entity_id(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_entity_id(<<>>, 0, 0, F@_1, _) -> #{entity_id => F@_1}.

d_field_m_entity_id_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_m_entity_id_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_m_entity_id_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) -> {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest}, dfp_read_field_def_m_entity_id(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_m_entity_id(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_m_entity_id(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_m_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_m_entity_id(Rest2, 0, 0, F@_1, TrUserData).

skip_group_m_entity_id(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_m_entity_id(Rest, 0, Z2, F@_1, TrUserData).

skip_32_m_entity_id(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_m_entity_id(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_generic_result_code(Bin, TrUserData) -> dfp_read_field_def_generic_result_code(Bin, 0, 0, id(ok, TrUserData), TrUserData).

dfp_read_field_def_generic_result_code(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_generic_result_code_result_code(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_generic_result_code(<<>>, 0, 0, F@_1, _) -> #{result_code => F@_1};
dfp_read_field_def_generic_result_code(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_generic_result_code(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_generic_result_code(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_generic_result_code(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_generic_result_code(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_generic_result_code_result_code(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_generic_result_code(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_generic_result_code(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_generic_result_code(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_generic_result_code(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_generic_result_code(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_generic_result_code(<<>>, 0, 0, F@_1, _) -> #{result_code => F@_1}.

d_field_generic_result_code_result_code(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_generic_result_code_result_code(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_generic_result_code_result_code(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_generic_result_code.enum_generic_result_code'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_generic_result_code(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_generic_result_code(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_generic_result_code(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_generic_result_code(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_generic_result_code(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_generic_result_code(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_generic_result_code(Rest2, 0, 0, F@_1, TrUserData).

skip_group_generic_result_code(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_generic_result_code(Rest, 0, Z2, F@_1, TrUserData).

skip_32_generic_result_code(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_generic_result_code(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_vector_3(Bin, TrUserData) -> dfp_read_field_def_vector_3(Bin, 0, 0, id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_vector_3(<<13, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_vector_3_x(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_vector_3(<<21, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_vector_3_y(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_vector_3(<<29, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_vector_3_z(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_vector_3(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{x => F@_1, y => F@_2, z => F@_3};
dfp_read_field_def_vector_3(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_vector_3(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_vector_3(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_vector_3(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_vector_3(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 -> d_field_vector_3_x(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      21 -> d_field_vector_3_y(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      29 -> d_field_vector_3_z(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_vector_3(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_vector_3(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{x => F@_1, y => F@_2, z => F@_3}.

d_field_vector_3_x(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id(infinity, TrUserData), F@_2, F@_3, TrUserData);
d_field_vector_3_x(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id('-infinity', TrUserData), F@_2, F@_3, TrUserData);
d_field_vector_3_x(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id(nan, TrUserData), F@_2, F@_3, TrUserData);
d_field_vector_3_x(<<Value:32/little-float, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id(Value, TrUserData), F@_2, F@_3, TrUserData).

d_field_vector_3_y(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id(infinity, TrUserData), F@_3, TrUserData);
d_field_vector_3_y(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id('-infinity', TrUserData), F@_3, TrUserData);
d_field_vector_3_y(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id(nan, TrUserData), F@_3, TrUserData);
d_field_vector_3_y(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id(Value, TrUserData), F@_3, TrUserData).

d_field_vector_3_z(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id(infinity, TrUserData), TrUserData);
d_field_vector_3_z(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id('-infinity', TrUserData), TrUserData);
d_field_vector_3_z(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id(nan, TrUserData), TrUserData);
d_field_vector_3_z(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id(Value, TrUserData), TrUserData).

skip_varint_vector_3(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_vector_3(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_vector_3(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_vector_3(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_vector_3(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_vector_3(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_vector_3(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_vector_3(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_vector_3(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_vector_3(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_vector_4(Bin, TrUserData) -> dfp_read_field_def_vector_4(Bin, 0, 0, id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_vector_4(<<13, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_w(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<21, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_x(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<29, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_y(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<37, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_z(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #{w => F@_1, x => F@_2, y => F@_3, z => F@_4};
dfp_read_field_def_vector_4(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_vector_4(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_vector_4(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_vector_4(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_vector_4(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 -> d_field_vector_4_w(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      21 -> d_field_vector_4_x(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      29 -> d_field_vector_4_y(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      37 -> d_field_vector_4_z(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    1 -> skip_64_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    2 -> skip_length_delimited_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    3 -> skip_group_vector_4(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    5 -> skip_32_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_vector_4(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #{w => F@_1, x => F@_2, y => F@_3, z => F@_4}.

d_field_vector_4_w(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id(infinity, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_vector_4_w(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id('-infinity', TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_vector_4_w(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id(nan, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_vector_4_w(<<Value:32/little-float, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id(Value, TrUserData), F@_2, F@_3, F@_4, TrUserData).

d_field_vector_4_x(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id(infinity, TrUserData), F@_3, F@_4, TrUserData);
d_field_vector_4_x(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id('-infinity', TrUserData), F@_3, F@_4, TrUserData);
d_field_vector_4_x(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id(nan, TrUserData), F@_3, F@_4, TrUserData);
d_field_vector_4_x(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id(Value, TrUserData), F@_3, F@_4, TrUserData).

d_field_vector_4_y(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id(infinity, TrUserData), F@_4, TrUserData);
d_field_vector_4_y(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id('-infinity', TrUserData), F@_4, TrUserData);
d_field_vector_4_y(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id(nan, TrUserData), F@_4, TrUserData);
d_field_vector_4_y(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id(Value, TrUserData), F@_4, TrUserData).

d_field_vector_4_z(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(infinity, TrUserData), TrUserData);
d_field_vector_4_z(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id('-infinity', TrUserData), TrUserData);
d_field_vector_4_z(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(nan, TrUserData), TrUserData);
d_field_vector_4_z(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(Value, TrUserData), TrUserData).

skip_varint_vector_4(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_vector_4(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_vector_4(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_vector_4(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_vector_4(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_vector_4(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_vector_4(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_vector_4(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_vector_4(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_vector_4(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'd_enum_eGem.shape_type'(0) -> primitive;
'd_enum_eGem.shape_type'(1) -> mesh;
'd_enum_eGem.shape_type'(V) -> V.

'd_enum_eGem.m_primitive_type'(0) -> sphere;
'd_enum_eGem.m_primitive_type'(1) -> box;
'd_enum_eGem.m_primitive_type'(V) -> V.

'd_enum_eGem.m_mesh_source'(0) -> asset_processor;
'd_enum_eGem.m_mesh_source'(1) -> file;
'd_enum_eGem.m_mesh_source'(2) -> url;
'd_enum_eGem.m_mesh_source'(V) -> V.

'd_enum_generic_result_code.enum_generic_result_code'(0) -> ok;
'd_enum_generic_result_code.enum_generic_result_code'(1) -> failed;
'd_enum_generic_result_code.enum_generic_result_code'(2) -> not_found;
'd_enum_generic_result_code.enum_generic_result_code'(3) -> invalid_parameter;
'd_enum_generic_result_code.enum_generic_result_code'(4) -> unimplemented;
'd_enum_generic_result_code.enum_generic_result_code'(5) -> deactivate_first;
'd_enum_generic_result_code.enum_generic_result_code'(6) -> activate_first;
'd_enum_generic_result_code.enum_generic_result_code'(7) -> entity_not_initialised;
'd_enum_generic_result_code.enum_generic_result_code'(8) -> component_already_exists;
'd_enum_generic_result_code.enum_generic_result_code'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_mesh_parameters -> merge_msg_m_mesh_parameters(Prev, New, TrUserData);
      m_primitive_box_parameters -> merge_msg_m_primitive_box_parameters(Prev, New, TrUserData);
      m_primitive_sphere_parameters -> merge_msg_m_primitive_sphere_parameters(Prev, New, TrUserData);
      m_primitive_parameters_message -> merge_msg_m_primitive_parameters_message(Prev, New, TrUserData);
      add_shape_component_parameters -> merge_msg_add_shape_component_parameters(Prev, New, TrUserData);
      m_entity_id -> merge_msg_m_entity_id(Prev, New, TrUserData);
      generic_result_code -> merge_msg_generic_result_code(Prev, New, TrUserData);
      vector_3 -> merge_msg_vector_3(Prev, New, TrUserData);
      vector_4 -> merge_msg_vector_4(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_mesh_parameters/3}).
merge_msg_m_mesh_parameters(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{mesh_source := NFmesh_source}} -> S1#{mesh_source => NFmesh_source};
	   {#{mesh_source := PFmesh_source}, _} -> S1#{mesh_source => PFmesh_source};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{mesh_location := NFmesh_location}} -> S2#{mesh_location => NFmesh_location};
      {#{mesh_location := PFmesh_location}, _} -> S2#{mesh_location => PFmesh_location};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_m_primitive_box_parameters/3}).
merge_msg_m_primitive_box_parameters(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{corner_1 := PFcorner_1}, #{corner_1 := NFcorner_1}} -> S1#{corner_1 => merge_msg_vector_3(PFcorner_1, NFcorner_1, TrUserData)};
	   {_, #{corner_1 := NFcorner_1}} -> S1#{corner_1 => NFcorner_1};
	   {#{corner_1 := PFcorner_1}, _} -> S1#{corner_1 => PFcorner_1};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{corner_2 := PFcorner_2}, #{corner_2 := NFcorner_2}} -> S2#{corner_2 => merge_msg_vector_3(PFcorner_2, NFcorner_2, TrUserData)};
      {_, #{corner_2 := NFcorner_2}} -> S2#{corner_2 => NFcorner_2};
      {#{corner_2 := PFcorner_2}, _} -> S2#{corner_2 => PFcorner_2};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_m_primitive_sphere_parameters/3}).
merge_msg_m_primitive_sphere_parameters(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{radius := NFradius}} -> S1#{radius => NFradius};
      {#{radius := PFradius}, _} -> S1#{radius => PFradius};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_m_primitive_parameters_message/3}).
merge_msg_m_primitive_parameters_message(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{primitive_type := NFprimitive_type}} -> S1#{primitive_type => NFprimitive_type};
	   {#{primitive_type := PFprimitive_type}, _} -> S1#{primitive_type => PFprimitive_type};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{primitive_parameters := {primitive_box_parameters, OPFprimitive_parameters}}, #{primitive_parameters := {primitive_box_parameters, ONFprimitive_parameters}}} ->
	  S2#{primitive_parameters => {primitive_box_parameters, merge_msg_m_primitive_box_parameters(OPFprimitive_parameters, ONFprimitive_parameters, TrUserData)}};
      {#{primitive_parameters := {primitive_sphere_parameters, OPFprimitive_parameters}}, #{primitive_parameters := {primitive_sphere_parameters, ONFprimitive_parameters}}} ->
	  S2#{primitive_parameters => {primitive_sphere_parameters, merge_msg_m_primitive_sphere_parameters(OPFprimitive_parameters, ONFprimitive_parameters, TrUserData)}};
      {_, #{primitive_parameters := NFprimitive_parameters}} -> S2#{primitive_parameters => NFprimitive_parameters};
      {#{primitive_parameters := PFprimitive_parameters}, _} -> S2#{primitive_parameters => PFprimitive_parameters};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_add_shape_component_parameters/3}).
merge_msg_add_shape_component_parameters(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{entity_id := NFentity_id}} -> S1#{entity_id => NFentity_id};
	   {#{entity_id := PFentity_id}, _} -> S1#{entity_id => PFentity_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S2#{type => NFtype};
	   {#{type := PFtype}, _} -> S2#{type => PFtype};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{parameters := {mesh_parameters, OPFparameters}}, #{parameters := {mesh_parameters, ONFparameters}}} -> S3#{parameters => {mesh_parameters, merge_msg_m_mesh_parameters(OPFparameters, ONFparameters, TrUserData)}};
      {#{parameters := {primitive_parameters, OPFparameters}}, #{parameters := {primitive_parameters, ONFparameters}}} -> S3#{parameters => {primitive_parameters, merge_msg_m_primitive_parameters_message(OPFparameters, ONFparameters, TrUserData)}};
      {_, #{parameters := NFparameters}} -> S3#{parameters => NFparameters};
      {#{parameters := PFparameters}, _} -> S3#{parameters => PFparameters};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_m_entity_id/3}).
merge_msg_m_entity_id(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{entity_id := NFentity_id}} -> S1#{entity_id => NFentity_id};
      {#{entity_id := PFentity_id}, _} -> S1#{entity_id => PFentity_id};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_generic_result_code/3}).
merge_msg_generic_result_code(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{result_code := NFresult_code}} -> S1#{result_code => NFresult_code};
      {#{result_code := PFresult_code}, _} -> S1#{result_code => PFresult_code};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_vector_3/3}).
merge_msg_vector_3(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{x := NFx}} -> S1#{x => NFx};
	   {#{x := PFx}, _} -> S1#{x => PFx};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{y := NFy}} -> S2#{y => NFy};
	   {#{y := PFy}, _} -> S2#{y => PFy};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{z := NFz}} -> S3#{z => NFz};
      {#{z := PFz}, _} -> S3#{z => PFz};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_vector_4/3}).
merge_msg_vector_4(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{w := NFw}} -> S1#{w => NFw};
	   {#{w := PFw}, _} -> S1#{w => PFw};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{x := NFx}} -> S2#{x => NFx};
	   {#{x := PFx}, _} -> S2#{x => PFx};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{y := NFy}} -> S3#{y => NFy};
	   {#{y := PFy}, _} -> S3#{y => PFy};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{z := NFz}} -> S4#{z => NFz};
      {#{z := PFz}, _} -> S4#{z => PFz};
      _ -> S4
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_mesh_parameters -> v_msg_m_mesh_parameters(Msg, [MsgName], TrUserData);
      m_primitive_box_parameters -> v_msg_m_primitive_box_parameters(Msg, [MsgName], TrUserData);
      m_primitive_sphere_parameters -> v_msg_m_primitive_sphere_parameters(Msg, [MsgName], TrUserData);
      m_primitive_parameters_message -> v_msg_m_primitive_parameters_message(Msg, [MsgName], TrUserData);
      add_shape_component_parameters -> v_msg_add_shape_component_parameters(Msg, [MsgName], TrUserData);
      m_entity_id -> v_msg_m_entity_id(Msg, [MsgName], TrUserData);
      generic_result_code -> v_msg_generic_result_code(Msg, [MsgName], TrUserData);
      vector_3 -> v_msg_vector_3(Msg, [MsgName], TrUserData);
      vector_4 -> v_msg_vector_4(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_mesh_parameters/3}).
-dialyzer({nowarn_function,v_msg_m_mesh_parameters/3}).
v_msg_m_mesh_parameters(#{} = M, Path, TrUserData) ->
    case M of
      #{mesh_source := F1} -> 'v_enum_eGem.m_mesh_source'(F1, [mesh_source | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{mesh_location := F2} -> v_type_string(F2, [mesh_location | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (mesh_source) -> ok;
		      (mesh_location) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_m_mesh_parameters(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), m_mesh_parameters}, M, Path);
v_msg_m_mesh_parameters(X, Path, _TrUserData) -> mk_type_error({expected_msg, m_mesh_parameters}, X, Path).

-compile({nowarn_unused_function,v_msg_m_primitive_box_parameters/3}).
-dialyzer({nowarn_function,v_msg_m_primitive_box_parameters/3}).
v_msg_m_primitive_box_parameters(#{} = M, Path, TrUserData) ->
    case M of
      #{corner_1 := F1} -> v_msg_vector_3(F1, [corner_1 | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{corner_2 := F2} -> v_msg_vector_3(F2, [corner_2 | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (corner_1) -> ok;
		      (corner_2) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_m_primitive_box_parameters(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), m_primitive_box_parameters}, M, Path);
v_msg_m_primitive_box_parameters(X, Path, _TrUserData) -> mk_type_error({expected_msg, m_primitive_box_parameters}, X, Path).

-compile({nowarn_unused_function,v_msg_m_primitive_sphere_parameters/3}).
-dialyzer({nowarn_function,v_msg_m_primitive_sphere_parameters/3}).
v_msg_m_primitive_sphere_parameters(#{} = M, Path, TrUserData) ->
    case M of
      #{radius := F1} -> v_type_float(F1, [radius | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (radius) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_m_primitive_sphere_parameters(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), m_primitive_sphere_parameters}, M, Path);
v_msg_m_primitive_sphere_parameters(X, Path, _TrUserData) -> mk_type_error({expected_msg, m_primitive_sphere_parameters}, X, Path).

-compile({nowarn_unused_function,v_msg_m_primitive_parameters_message/3}).
-dialyzer({nowarn_function,v_msg_m_primitive_parameters_message/3}).
v_msg_m_primitive_parameters_message(#{} = M, Path, TrUserData) ->
    case M of
      #{primitive_type := F1} -> 'v_enum_eGem.m_primitive_type'(F1, [primitive_type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{primitive_parameters := {primitive_box_parameters, OF2}} -> v_msg_m_primitive_box_parameters(OF2, [primitive_box_parameters, primitive_parameters | Path], TrUserData);
      #{primitive_parameters := {primitive_sphere_parameters, OF2}} -> v_msg_m_primitive_sphere_parameters(OF2, [primitive_sphere_parameters, primitive_parameters | Path], TrUserData);
      #{primitive_parameters := F2} -> mk_type_error(invalid_oneof, F2, [primitive_parameters | Path]);
      _ -> ok
    end,
    lists:foreach(fun (primitive_type) -> ok;
		      (primitive_parameters) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_m_primitive_parameters_message(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), m_primitive_parameters_message}, M, Path);
v_msg_m_primitive_parameters_message(X, Path, _TrUserData) -> mk_type_error({expected_msg, m_primitive_parameters_message}, X, Path).

-compile({nowarn_unused_function,v_msg_add_shape_component_parameters/3}).
-dialyzer({nowarn_function,v_msg_add_shape_component_parameters/3}).
v_msg_add_shape_component_parameters(#{} = M, Path, TrUserData) ->
    case M of
      #{entity_id := F1} -> v_type_uint64(F1, [entity_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{type := F2} -> 'v_enum_eGem.shape_type'(F2, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{parameters := {mesh_parameters, OF3}} -> v_msg_m_mesh_parameters(OF3, [mesh_parameters, parameters | Path], TrUserData);
      #{parameters := {primitive_parameters, OF3}} -> v_msg_m_primitive_parameters_message(OF3, [primitive_parameters, parameters | Path], TrUserData);
      #{parameters := F3} -> mk_type_error(invalid_oneof, F3, [parameters | Path]);
      _ -> ok
    end,
    lists:foreach(fun (entity_id) -> ok;
		      (type) -> ok;
		      (parameters) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_add_shape_component_parameters(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), add_shape_component_parameters}, M, Path);
v_msg_add_shape_component_parameters(X, Path, _TrUserData) -> mk_type_error({expected_msg, add_shape_component_parameters}, X, Path).

-compile({nowarn_unused_function,v_msg_m_entity_id/3}).
-dialyzer({nowarn_function,v_msg_m_entity_id/3}).
v_msg_m_entity_id(#{} = M, Path, TrUserData) ->
    case M of
      #{entity_id := F1} -> v_type_uint64(F1, [entity_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (entity_id) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_m_entity_id(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), m_entity_id}, M, Path);
v_msg_m_entity_id(X, Path, _TrUserData) -> mk_type_error({expected_msg, m_entity_id}, X, Path).

-compile({nowarn_unused_function,v_msg_generic_result_code/3}).
-dialyzer({nowarn_function,v_msg_generic_result_code/3}).
v_msg_generic_result_code(#{} = M, Path, TrUserData) ->
    case M of
      #{result_code := F1} -> 'v_enum_generic_result_code.enum_generic_result_code'(F1, [result_code | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (result_code) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_generic_result_code(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), generic_result_code}, M, Path);
v_msg_generic_result_code(X, Path, _TrUserData) -> mk_type_error({expected_msg, generic_result_code}, X, Path).

-compile({nowarn_unused_function,v_msg_vector_3/3}).
-dialyzer({nowarn_function,v_msg_vector_3/3}).
v_msg_vector_3(#{} = M, Path, TrUserData) ->
    case M of
      #{x := F1} -> v_type_float(F1, [x | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{y := F2} -> v_type_float(F2, [y | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{z := F3} -> v_type_float(F3, [z | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (x) -> ok;
		      (y) -> ok;
		      (z) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_vector_3(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), vector_3}, M, Path);
v_msg_vector_3(X, Path, _TrUserData) -> mk_type_error({expected_msg, vector_3}, X, Path).

-compile({nowarn_unused_function,v_msg_vector_4/3}).
-dialyzer({nowarn_function,v_msg_vector_4/3}).
v_msg_vector_4(#{} = M, Path, TrUserData) ->
    case M of
      #{w := F1} -> v_type_float(F1, [w | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{x := F2} -> v_type_float(F2, [x | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{y := F3} -> v_type_float(F3, [y | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{z := F4} -> v_type_float(F4, [z | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (w) -> ok;
		      (x) -> ok;
		      (y) -> ok;
		      (z) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_vector_4(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), vector_4}, M, Path);
v_msg_vector_4(X, Path, _TrUserData) -> mk_type_error({expected_msg, vector_4}, X, Path).

-compile({nowarn_unused_function,'v_enum_eGem.shape_type'/3}).
-dialyzer({nowarn_function,'v_enum_eGem.shape_type'/3}).
'v_enum_eGem.shape_type'(primitive, _Path, _TrUserData) -> ok;
'v_enum_eGem.shape_type'(mesh, _Path, _TrUserData) -> ok;
'v_enum_eGem.shape_type'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_eGem.shape_type'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'eGem.shape_type'}, X, Path).

-compile({nowarn_unused_function,'v_enum_eGem.m_primitive_type'/3}).
-dialyzer({nowarn_function,'v_enum_eGem.m_primitive_type'/3}).
'v_enum_eGem.m_primitive_type'(sphere, _Path, _TrUserData) -> ok;
'v_enum_eGem.m_primitive_type'(box, _Path, _TrUserData) -> ok;
'v_enum_eGem.m_primitive_type'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_eGem.m_primitive_type'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'eGem.m_primitive_type'}, X, Path).

-compile({nowarn_unused_function,'v_enum_eGem.m_mesh_source'/3}).
-dialyzer({nowarn_function,'v_enum_eGem.m_mesh_source'/3}).
'v_enum_eGem.m_mesh_source'(asset_processor, _Path, _TrUserData) -> ok;
'v_enum_eGem.m_mesh_source'(file, _Path, _TrUserData) -> ok;
'v_enum_eGem.m_mesh_source'(url, _Path, _TrUserData) -> ok;
'v_enum_eGem.m_mesh_source'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_eGem.m_mesh_source'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'eGem.m_mesh_source'}, X, Path).

-compile({nowarn_unused_function,'v_enum_generic_result_code.enum_generic_result_code'/3}).
-dialyzer({nowarn_function,'v_enum_generic_result_code.enum_generic_result_code'/3}).
'v_enum_generic_result_code.enum_generic_result_code'(ok, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(failed, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(not_found, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(invalid_parameter, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(unimplemented, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(deactivate_first, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(activate_first, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(entity_not_initialised, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(component_already_exists, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_generic_result_code.enum_generic_result_code'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'generic_result_code.enum_generic_result_code'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) -> mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) -> Path2 = prettify_path(Path), erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'eGem.shape_type'}, [{primitive, 0}, {mesh, 1}]}, {{enum, 'eGem.m_primitive_type'}, [{sphere, 0}, {box, 1}]}, {{enum, 'eGem.m_mesh_source'}, [{asset_processor, 0}, {file, 1}, {url, 2}]},
     {{enum, 'generic_result_code.enum_generic_result_code'}, [{ok, 0}, {failed, 1}, {not_found, 2}, {invalid_parameter, 3}, {unimplemented, 4}, {deactivate_first, 5}, {activate_first, 6}, {entity_not_initialised, 7}, {component_already_exists, 8}]},
     {{msg, m_mesh_parameters}, [#{name => mesh_source, fnum => 1, rnum => 2, type => {enum, 'eGem.m_mesh_source'}, occurrence => optional, opts => []}, #{name => mesh_location, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, m_primitive_box_parameters}, [#{name => corner_1, fnum => 1, rnum => 2, type => {msg, vector_3}, occurrence => optional, opts => []}, #{name => corner_2, fnum => 2, rnum => 3, type => {msg, vector_3}, occurrence => optional, opts => []}]},
     {{msg, m_primitive_sphere_parameters}, [#{name => radius, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}]},
     {{msg, m_primitive_parameters_message},
      [#{name => primitive_type, fnum => 1, rnum => 2, type => {enum, 'eGem.m_primitive_type'}, occurrence => optional, opts => []},
       #{name => primitive_parameters, rnum => 3,
	 fields =>
	     [#{name => primitive_box_parameters, fnum => 2, rnum => 3, type => {msg, m_primitive_box_parameters}, occurrence => optional, opts => []},
	      #{name => primitive_sphere_parameters, fnum => 3, rnum => 3, type => {msg, m_primitive_sphere_parameters}, occurrence => optional, opts => []}]}]},
     {{msg, add_shape_component_parameters},
      [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'eGem.shape_type'}, occurrence => optional, opts => []},
       #{name => parameters, rnum => 4,
	 fields =>
	     [#{name => mesh_parameters, fnum => 31, rnum => 4, type => {msg, m_mesh_parameters}, occurrence => optional, opts => []},
	      #{name => primitive_parameters, fnum => 32, rnum => 4, type => {msg, m_primitive_parameters_message}, occurrence => optional, opts => []}]}]},
     {{msg, m_entity_id}, [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}]},
     {{msg, generic_result_code}, [#{name => result_code, fnum => 1, rnum => 2, type => {enum, 'generic_result_code.enum_generic_result_code'}, occurrence => optional, opts => []}]},
     {{msg, vector_3},
      [#{name => x, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => y, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
       #{name => z, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}]},
     {{msg, vector_4},
      [#{name => w, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => x, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
       #{name => y, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}, #{name => z, fnum => 4, rnum => 5, type => float, occurrence => optional, opts => []}]}].


get_msg_names() -> [m_mesh_parameters, m_primitive_box_parameters, m_primitive_sphere_parameters, m_primitive_parameters_message, add_shape_component_parameters, m_entity_id, generic_result_code, vector_3, vector_4].


get_group_names() -> [].


get_msg_or_group_names() -> [m_mesh_parameters, m_primitive_box_parameters, m_primitive_sphere_parameters, m_primitive_parameters_message, add_shape_component_parameters, m_entity_id, generic_result_code, vector_3, vector_4].


get_enum_names() -> ['eGem.shape_type', 'eGem.m_primitive_type', 'eGem.m_mesh_source', 'generic_result_code.enum_generic_result_code'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(m_mesh_parameters) ->
    [#{name => mesh_source, fnum => 1, rnum => 2, type => {enum, 'eGem.m_mesh_source'}, occurrence => optional, opts => []}, #{name => mesh_location, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(m_primitive_box_parameters) ->
    [#{name => corner_1, fnum => 1, rnum => 2, type => {msg, vector_3}, occurrence => optional, opts => []}, #{name => corner_2, fnum => 2, rnum => 3, type => {msg, vector_3}, occurrence => optional, opts => []}];
find_msg_def(m_primitive_sphere_parameters) -> [#{name => radius, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}];
find_msg_def(m_primitive_parameters_message) ->
    [#{name => primitive_type, fnum => 1, rnum => 2, type => {enum, 'eGem.m_primitive_type'}, occurrence => optional, opts => []},
     #{name => primitive_parameters, rnum => 3,
       fields =>
	   [#{name => primitive_box_parameters, fnum => 2, rnum => 3, type => {msg, m_primitive_box_parameters}, occurrence => optional, opts => []},
	    #{name => primitive_sphere_parameters, fnum => 3, rnum => 3, type => {msg, m_primitive_sphere_parameters}, occurrence => optional, opts => []}]}];
find_msg_def(add_shape_component_parameters) ->
    [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'eGem.shape_type'}, occurrence => optional, opts => []},
     #{name => parameters, rnum => 4,
       fields =>
	   [#{name => mesh_parameters, fnum => 31, rnum => 4, type => {msg, m_mesh_parameters}, occurrence => optional, opts => []},
	    #{name => primitive_parameters, fnum => 32, rnum => 4, type => {msg, m_primitive_parameters_message}, occurrence => optional, opts => []}]}];
find_msg_def(m_entity_id) -> [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}];
find_msg_def(generic_result_code) -> [#{name => result_code, fnum => 1, rnum => 2, type => {enum, 'generic_result_code.enum_generic_result_code'}, occurrence => optional, opts => []}];
find_msg_def(vector_3) ->
    [#{name => x, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => y, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
     #{name => z, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}];
find_msg_def(vector_4) ->
    [#{name => w, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => x, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
     #{name => y, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}, #{name => z, fnum => 4, rnum => 5, type => float, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('eGem.shape_type') -> [{primitive, 0}, {mesh, 1}];
find_enum_def('eGem.m_primitive_type') -> [{sphere, 0}, {box, 1}];
find_enum_def('eGem.m_mesh_source') -> [{asset_processor, 0}, {file, 1}, {url, 2}];
find_enum_def('generic_result_code.enum_generic_result_code') ->
    [{ok, 0}, {failed, 1}, {not_found, 2}, {invalid_parameter, 3}, {unimplemented, 4}, {deactivate_first, 5}, {activate_first, 6}, {entity_not_initialised, 7}, {component_already_exists, 8}];
find_enum_def(_) -> error.


enum_symbol_by_value('eGem.shape_type', Value) -> 'enum_symbol_by_value_eGem.shape_type'(Value);
enum_symbol_by_value('eGem.m_primitive_type', Value) -> 'enum_symbol_by_value_eGem.m_primitive_type'(Value);
enum_symbol_by_value('eGem.m_mesh_source', Value) -> 'enum_symbol_by_value_eGem.m_mesh_source'(Value);
enum_symbol_by_value('generic_result_code.enum_generic_result_code', Value) -> 'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(Value).


enum_value_by_symbol('eGem.shape_type', Sym) -> 'enum_value_by_symbol_eGem.shape_type'(Sym);
enum_value_by_symbol('eGem.m_primitive_type', Sym) -> 'enum_value_by_symbol_eGem.m_primitive_type'(Sym);
enum_value_by_symbol('eGem.m_mesh_source', Sym) -> 'enum_value_by_symbol_eGem.m_mesh_source'(Sym);
enum_value_by_symbol('generic_result_code.enum_generic_result_code', Sym) -> 'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(Sym).


'enum_symbol_by_value_eGem.shape_type'(0) -> primitive;
'enum_symbol_by_value_eGem.shape_type'(1) -> mesh.


'enum_value_by_symbol_eGem.shape_type'(primitive) -> 0;
'enum_value_by_symbol_eGem.shape_type'(mesh) -> 1.

'enum_symbol_by_value_eGem.m_primitive_type'(0) -> sphere;
'enum_symbol_by_value_eGem.m_primitive_type'(1) -> box.


'enum_value_by_symbol_eGem.m_primitive_type'(sphere) -> 0;
'enum_value_by_symbol_eGem.m_primitive_type'(box) -> 1.

'enum_symbol_by_value_eGem.m_mesh_source'(0) -> asset_processor;
'enum_symbol_by_value_eGem.m_mesh_source'(1) -> file;
'enum_symbol_by_value_eGem.m_mesh_source'(2) -> url.


'enum_value_by_symbol_eGem.m_mesh_source'(asset_processor) -> 0;
'enum_value_by_symbol_eGem.m_mesh_source'(file) -> 1;
'enum_value_by_symbol_eGem.m_mesh_source'(url) -> 2.

'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(0) -> ok;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(1) -> failed;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(2) -> not_found;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(3) -> invalid_parameter;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(4) -> unimplemented;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(5) -> deactivate_first;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(6) -> activate_first;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(7) -> entity_not_initialised;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(8) -> component_already_exists.


'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(ok) -> 0;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(failed) -> 1;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(not_found) -> 2;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(invalid_parameter) -> 3;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(unimplemented) -> 4;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(deactivate_first) -> 5;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(activate_first) -> 6;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(entity_not_initialised) -> 7;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(component_already_exists) -> 8.


get_service_names() -> ['eGem.shape_service'].


get_service_def('eGem.shape_service') ->
    {{service, 'eGem.shape_service'},
     [#{name => add_shape_component, input => add_shape_component_parameters, output => generic_result_code, input_stream => false, output_stream => false, opts => []},
      #{name => remove_shape_components, input => m_entity_id, output => generic_result_code, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('eGem.shape_service') -> [add_shape_component, remove_shape_components];
get_rpc_names(_) -> error.


find_rpc_def('eGem.shape_service', RpcName) -> 'find_rpc_def_eGem.shape_service'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_eGem.shape_service'(add_shape_component) -> #{name => add_shape_component, input => add_shape_component_parameters, output => generic_result_code, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_eGem.shape_service'(remove_shape_components) -> #{name => remove_shape_components, input => m_entity_id, output => generic_result_code, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_eGem.shape_service'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"eGem.shape_service">>) -> 'eGem.shape_service';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('eGem.shape_service') -> <<"eGem.shape_service">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"eGem.shape_service">>, <<"add_shape_component">>) -> {'eGem.shape_service', add_shape_component};
fqbins_to_service_and_rpc_name(<<"eGem.shape_service">>, <<"remove_shape_components">>) -> {'eGem.shape_service', remove_shape_components};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('eGem.shape_service', add_shape_component) -> {<<"eGem.shape_service">>, <<"add_shape_component">>};
service_and_rpc_name_to_fqbins('eGem.shape_service', remove_shape_components) -> {<<"eGem.shape_service">>, <<"remove_shape_components">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"eGem.m_mesh_parameters">>) -> m_mesh_parameters;
fqbin_to_msg_name(<<"eGem.m_primitive_box_parameters">>) -> m_primitive_box_parameters;
fqbin_to_msg_name(<<"eGem.m_primitive_sphere_parameters">>) -> m_primitive_sphere_parameters;
fqbin_to_msg_name(<<"eGem.m_primitive_parameters_message">>) -> m_primitive_parameters_message;
fqbin_to_msg_name(<<"eGem.add_shape_component_parameters">>) -> add_shape_component_parameters;
fqbin_to_msg_name(<<"eGem.m_entity_id">>) -> m_entity_id;
fqbin_to_msg_name(<<"eGem.generic_result_code">>) -> generic_result_code;
fqbin_to_msg_name(<<"eGem.vector3">>) -> vector_3;
fqbin_to_msg_name(<<"eGem.vector4">>) -> vector_4;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(m_mesh_parameters) -> <<"eGem.m_mesh_parameters">>;
msg_name_to_fqbin(m_primitive_box_parameters) -> <<"eGem.m_primitive_box_parameters">>;
msg_name_to_fqbin(m_primitive_sphere_parameters) -> <<"eGem.m_primitive_sphere_parameters">>;
msg_name_to_fqbin(m_primitive_parameters_message) -> <<"eGem.m_primitive_parameters_message">>;
msg_name_to_fqbin(add_shape_component_parameters) -> <<"eGem.add_shape_component_parameters">>;
msg_name_to_fqbin(m_entity_id) -> <<"eGem.m_entity_id">>;
msg_name_to_fqbin(generic_result_code) -> <<"eGem.generic_result_code">>;
msg_name_to_fqbin(vector_3) -> <<"eGem.vector3">>;
msg_name_to_fqbin(vector_4) -> <<"eGem.vector4">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"eGem.shape_type">>) -> 'eGem.shape_type';
fqbin_to_enum_name(<<"eGem.m_primitive_type">>) -> 'eGem.m_primitive_type';
fqbin_to_enum_name(<<"eGem.m_mesh_source">>) -> 'eGem.m_mesh_source';
fqbin_to_enum_name(<<"eGem.generic_result_code.enum_generic_result_code">>) -> 'generic_result_code.enum_generic_result_code';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('eGem.shape_type') -> <<"eGem.shape_type">>;
enum_name_to_fqbin('eGem.m_primitive_type') -> <<"eGem.m_primitive_type">>;
enum_name_to_fqbin('eGem.m_mesh_source') -> <<"eGem.m_mesh_source">>;
enum_name_to_fqbin('generic_result_code.enum_generic_result_code') -> <<"eGem.generic_result_code.enum_generic_result_code">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> eGem.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "shape_service.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["shape_service.proto", "global_defs.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["shape_service", "global_defs"].


get_msg_containment("shape_service") -> [add_shape_component_parameters, m_mesh_parameters, m_primitive_box_parameters, m_primitive_parameters_message, m_primitive_sphere_parameters];
get_msg_containment("global_defs") -> [generic_result_code, m_entity_id, vector_3, vector_4];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("shape_service") -> eGem;
get_pkg_containment("global_defs") -> eGem;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("shape_service") -> ['eGem.shape_service'];
get_service_containment("global_defs") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("shape_service") -> [{'eGem.shape_service', add_shape_component}, {'eGem.shape_service', remove_shape_components}];
get_rpc_containment("global_defs") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("shape_service") -> ['eGem.m_mesh_source', 'eGem.m_primitive_type', 'eGem.shape_type'];
get_enum_containment("global_defs") -> ['generic_result_code.enum_generic_result_code'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"eGem.vector3">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(<<"eGem.m_primitive_sphere_parameters">>) -> "shape_service";
get_proto_by_msg_name_as_fqbin(<<"eGem.m_primitive_box_parameters">>) -> "shape_service";
get_proto_by_msg_name_as_fqbin(<<"eGem.m_mesh_parameters">>) -> "shape_service";
get_proto_by_msg_name_as_fqbin(<<"eGem.add_shape_component_parameters">>) -> "shape_service";
get_proto_by_msg_name_as_fqbin(<<"eGem.vector4">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(<<"eGem.m_entity_id">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(<<"eGem.generic_result_code">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(<<"eGem.m_primitive_parameters_message">>) -> "shape_service";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"eGem.shape_service">>) -> "shape_service";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"eGem.generic_result_code.enum_generic_result_code">>) -> "global_defs";
get_proto_by_enum_name_as_fqbin(<<"eGem.shape_type">>) -> "shape_service";
get_proto_by_enum_name_as_fqbin(<<"eGem.m_primitive_type">>) -> "shape_service";
get_proto_by_enum_name_as_fqbin(<<"eGem.m_mesh_source">>) -> "shape_service";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"eGem">>) -> ["global_defs", "shape_service"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.12.0".

gpb_version_as_list() ->
    [4,12,0].
