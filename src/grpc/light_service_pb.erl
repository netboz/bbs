%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.12.0
-module(light_service_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_generic_result_code.enum_generic_result_code'/1, 'enum_value_by_symbol_generic_result_code.enum_generic_result_code'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'generic_result_code.enum_generic_result_code'() :: ok | failed | not_found | invalid_parameter | unimplemented | deactivate_first | activate_first | entity_not_initialised | component_already_exists.
-export_type(['generic_result_code.enum_generic_result_code'/0]).

%% message types
-type light_component_parameters() ::
      #{entity_id               => non_neg_integer(), % = 1, 64 bits
        is_visible              => boolean() | 0 | 1, % = 2
        is_on                   => boolean() | 0 | 1, % = 3
        color                   => vector_4(),      % = 4
        diffuse_multiplier      => float() | integer() | infinity | '-infinity' | nan, % = 5
        specular_multiplier     => float() | integer() | infinity | '-infinity' | nan, % = 6
        is_ambiant              => boolean() | 0 | 1, % = 7
        max_point_distance      => float() | integer() | infinity | '-infinity' | nan, % = 8
        'PointAttenuationBulbSize' => float() | integer() | infinity | '-infinity' | nan, % = 9
        area_max_distance       => float() | integer() | infinity | '-infinity' | nan, % = 10
        area_width              => float() | integer() | infinity | '-infinity' | nan, % = 11
        area_height             => float() | integer() | infinity | '-infinity' | nan, % = 12
        area_fov                => float() | integer() | infinity | '-infinity' | nan, % = 13
        projector_max_distance  => float() | integer() | infinity | '-infinity' | nan, % = 14
        projector_attenuation_bulb_size => float() | integer() | infinity | '-infinity' | nan, % = 15
        projector_fov           => float() | integer() | infinity | '-infinity' | nan, % = 16
        projector_near_plane    => float() | integer() | infinity | '-infinity' | nan, % = 17
        probe_area_dimension    => vector_3(),      % = 18
        probe_sort_priority     => non_neg_integer(), % = 19, 32 bits
        probe_box_projected     => boolean() | 0 | 1, % = 20
        probe_box_height        => float() | integer() | infinity | '-infinity' | nan, % = 21
        probe_box_length        => float() | integer() | infinity | '-infinity' | nan, % = 22
        probe_box_width         => float() | integer() | infinity | '-infinity' | nan, % = 23
        attenuation_falloff     => float() | integer() | infinity | '-infinity' | nan, % = 24
        probe_fade              => float() | integer() | infinity | '-infinity' | nan % = 25
       }.

-type m_entity_id() ::
      #{entity_id               => non_neg_integer() % = 1, 64 bits
       }.

-type generic_result_code() ::
      #{result_code             => ok | failed | not_found | invalid_parameter | unimplemented | deactivate_first | activate_first | entity_not_initialised | component_already_exists | integer() % = 1, enum generic_result_code.enum_generic_result_code
       }.

-type vector_3() ::
      #{x                       => float() | integer() | infinity | '-infinity' | nan, % = 1
        y                       => float() | integer() | infinity | '-infinity' | nan, % = 2
        z                       => float() | integer() | infinity | '-infinity' | nan % = 3
       }.

-type vector_4() ::
      #{w                       => float() | integer() | infinity | '-infinity' | nan, % = 1
        x                       => float() | integer() | infinity | '-infinity' | nan, % = 2
        y                       => float() | integer() | infinity | '-infinity' | nan, % = 3
        z                       => float() | integer() | infinity | '-infinity' | nan % = 4
       }.

-export_type(['light_component_parameters'/0, 'm_entity_id'/0, 'generic_result_code'/0, 'vector_3'/0, 'vector_4'/0]).

-spec encode_msg(light_component_parameters() | m_entity_id() | generic_result_code() | vector_3() | vector_4(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg(light_component_parameters() | m_entity_id() | generic_result_code() | vector_3() | vector_4(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      light_component_parameters -> encode_msg_light_component_parameters(id(Msg, TrUserData), TrUserData);
      m_entity_id -> encode_msg_m_entity_id(id(Msg, TrUserData), TrUserData);
      generic_result_code -> encode_msg_generic_result_code(id(Msg, TrUserData), TrUserData);
      vector_3 -> encode_msg_vector_3(id(Msg, TrUserData), TrUserData);
      vector_4 -> encode_msg_vector_4(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_light_component_parameters(Msg, TrUserData) -> encode_msg_light_component_parameters(Msg, <<>>, TrUserData).


encode_msg_light_component_parameters(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{entity_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{is_visible := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= false -> B1;
		    true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{is_on := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= false -> B2;
		    true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{color := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= undefined -> B3;
		    true -> e_mfield_light_component_parameters_color(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{diffuse_multiplier := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0.0 -> B4;
		    true -> e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{specular_multiplier := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0.0 -> B5;
		    true -> e_type_float(TrF6, <<B5/binary, 53>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{is_ambiant := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= false -> B6;
		    true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{max_point_distance := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= 0.0 -> B7;
		    true -> e_type_float(TrF8, <<B7/binary, 69>>, TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{'PointAttenuationBulbSize' := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= 0.0 -> B8;
		    true -> e_type_float(TrF9, <<B8/binary, 77>>, TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{area_max_distance := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  if TrF10 =:= 0.0 -> B9;
		     true -> e_type_float(TrF10, <<B9/binary, 85>>, TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    B11 = case M of
	    #{area_width := F11} ->
		begin
		  TrF11 = id(F11, TrUserData),
		  if TrF11 =:= 0.0 -> B10;
		     true -> e_type_float(TrF11, <<B10/binary, 93>>, TrUserData)
		  end
		end;
	    _ -> B10
	  end,
    B12 = case M of
	    #{area_height := F12} ->
		begin
		  TrF12 = id(F12, TrUserData),
		  if TrF12 =:= 0.0 -> B11;
		     true -> e_type_float(TrF12, <<B11/binary, 101>>, TrUserData)
		  end
		end;
	    _ -> B11
	  end,
    B13 = case M of
	    #{area_fov := F13} ->
		begin
		  TrF13 = id(F13, TrUserData),
		  if TrF13 =:= 0.0 -> B12;
		     true -> e_type_float(TrF13, <<B12/binary, 109>>, TrUserData)
		  end
		end;
	    _ -> B12
	  end,
    B14 = case M of
	    #{projector_max_distance := F14} ->
		begin
		  TrF14 = id(F14, TrUserData),
		  if TrF14 =:= 0.0 -> B13;
		     true -> e_type_float(TrF14, <<B13/binary, 117>>, TrUserData)
		  end
		end;
	    _ -> B13
	  end,
    B15 = case M of
	    #{projector_attenuation_bulb_size := F15} ->
		begin
		  TrF15 = id(F15, TrUserData),
		  if TrF15 =:= 0.0 -> B14;
		     true -> e_type_float(TrF15, <<B14/binary, 125>>, TrUserData)
		  end
		end;
	    _ -> B14
	  end,
    B16 = case M of
	    #{projector_fov := F16} ->
		begin
		  TrF16 = id(F16, TrUserData),
		  if TrF16 =:= 0.0 -> B15;
		     true -> e_type_float(TrF16, <<B15/binary, 133, 1>>, TrUserData)
		  end
		end;
	    _ -> B15
	  end,
    B17 = case M of
	    #{projector_near_plane := F17} ->
		begin
		  TrF17 = id(F17, TrUserData),
		  if TrF17 =:= 0.0 -> B16;
		     true -> e_type_float(TrF17, <<B16/binary, 141, 1>>, TrUserData)
		  end
		end;
	    _ -> B16
	  end,
    B18 = case M of
	    #{probe_area_dimension := F18} ->
		begin
		  TrF18 = id(F18, TrUserData),
		  if TrF18 =:= undefined -> B17;
		     true -> e_mfield_light_component_parameters_probe_area_dimension(TrF18, <<B17/binary, 146, 1>>, TrUserData)
		  end
		end;
	    _ -> B17
	  end,
    B19 = case M of
	    #{probe_sort_priority := F19} ->
		begin
		  TrF19 = id(F19, TrUserData),
		  if TrF19 =:= 0 -> B18;
		     true -> e_varint(TrF19, <<B18/binary, 152, 1>>, TrUserData)
		  end
		end;
	    _ -> B18
	  end,
    B20 = case M of
	    #{probe_box_projected := F20} ->
		begin
		  TrF20 = id(F20, TrUserData),
		  if TrF20 =:= false -> B19;
		     true -> e_type_bool(TrF20, <<B19/binary, 160, 1>>, TrUserData)
		  end
		end;
	    _ -> B19
	  end,
    B21 = case M of
	    #{probe_box_height := F21} ->
		begin
		  TrF21 = id(F21, TrUserData),
		  if TrF21 =:= 0.0 -> B20;
		     true -> e_type_float(TrF21, <<B20/binary, 173, 1>>, TrUserData)
		  end
		end;
	    _ -> B20
	  end,
    B22 = case M of
	    #{probe_box_length := F22} ->
		begin
		  TrF22 = id(F22, TrUserData),
		  if TrF22 =:= 0.0 -> B21;
		     true -> e_type_float(TrF22, <<B21/binary, 181, 1>>, TrUserData)
		  end
		end;
	    _ -> B21
	  end,
    B23 = case M of
	    #{probe_box_width := F23} ->
		begin
		  TrF23 = id(F23, TrUserData),
		  if TrF23 =:= 0.0 -> B22;
		     true -> e_type_float(TrF23, <<B22/binary, 189, 1>>, TrUserData)
		  end
		end;
	    _ -> B22
	  end,
    B24 = case M of
	    #{attenuation_falloff := F24} ->
		begin
		  TrF24 = id(F24, TrUserData),
		  if TrF24 =:= 0.0 -> B23;
		     true -> e_type_float(TrF24, <<B23/binary, 197, 1>>, TrUserData)
		  end
		end;
	    _ -> B23
	  end,
    case M of
      #{probe_fade := F25} ->
	  begin
	    TrF25 = id(F25, TrUserData),
	    if TrF25 =:= 0.0 -> B24;
	       true -> e_type_float(TrF25, <<B24/binary, 205, 1>>, TrUserData)
	    end
	  end;
      _ -> B24
    end.

encode_msg_m_entity_id(Msg, TrUserData) -> encode_msg_m_entity_id(Msg, <<>>, TrUserData).


encode_msg_m_entity_id(#{} = M, Bin, TrUserData) ->
    case M of
      #{entity_id := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_generic_result_code(Msg, TrUserData) -> encode_msg_generic_result_code(Msg, <<>>, TrUserData).


encode_msg_generic_result_code(#{} = M, Bin, TrUserData) ->
    case M of
      #{result_code := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= ok; TrF1 =:= 0 -> Bin;
	       true -> 'e_enum_generic_result_code.enum_generic_result_code'(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_vector_3(Msg, TrUserData) -> encode_msg_vector_3(Msg, <<>>, TrUserData).


encode_msg_vector_3(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{x := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0.0 -> Bin;
		    true -> e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{y := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0.0 -> B1;
		    true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{z := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0.0 -> B2;
	       true -> e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_vector_4(Msg, TrUserData) -> encode_msg_vector_4(Msg, <<>>, TrUserData).


encode_msg_vector_4(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{w := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0.0 -> Bin;
		    true -> e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{x := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0.0 -> B1;
		    true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{y := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0.0 -> B2;
		    true -> e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{z := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= 0.0 -> B3;
	       true -> e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

e_mfield_light_component_parameters_color(Msg, Bin, TrUserData) -> SubBin = encode_msg_vector_4(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_light_component_parameters_probe_area_dimension(Msg, Bin, TrUserData) -> SubBin = encode_msg_vector_3(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

'e_enum_generic_result_code.enum_generic_result_code'(ok, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_generic_result_code.enum_generic_result_code'(failed, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_generic_result_code.enum_generic_result_code'(not_found, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_generic_result_code.enum_generic_result_code'(invalid_parameter, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_generic_result_code.enum_generic_result_code'(unimplemented, Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_generic_result_code.enum_generic_result_code'(deactivate_first, Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_generic_result_code.enum_generic_result_code'(activate_first, Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_generic_result_code.enum_generic_result_code'(entity_not_initialised, Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_generic_result_code.enum_generic_result_code'(component_already_exists, Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_generic_result_code.enum_generic_result_code'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) -> Utf8 = unicode:characters_to_binary(S), Bin2 = e_varint(byte_size(Utf8), Bin), <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) -> Bin2 = e_varint(byte_size(Bytes), Bin), <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) -> BytesBin = iolist_to_binary(Bytes), Bin2 = e_varint(byte_size(BytesBin), Bin), <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) -> Bin2 = <<Bin/binary, (N band 127 bor 128)>>, e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) -> TrUserData = proplists:get_value(user_data, Opts), decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(light_component_parameters, Bin, TrUserData) -> id(decode_msg_light_component_parameters(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_entity_id, Bin, TrUserData) -> id(decode_msg_m_entity_id(Bin, TrUserData), TrUserData);
decode_msg_2_doit(generic_result_code, Bin, TrUserData) -> id(decode_msg_generic_result_code(Bin, TrUserData), TrUserData);
decode_msg_2_doit(vector_3, Bin, TrUserData) -> id(decode_msg_vector_3(Bin, TrUserData), TrUserData);
decode_msg_2_doit(vector_4, Bin, TrUserData) -> id(decode_msg_vector_4(Bin, TrUserData), TrUserData).



decode_msg_light_component_parameters(Bin, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Bin, 0, 0, id(0, TrUserData), id(false, TrUserData), id(false, TrUserData), id('$undef', TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(false, TrUserData), id(0.0, TrUserData),
						  id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id('$undef', TrUserData), id(0, TrUserData),
						  id(false, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_light_component_parameters(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_entity_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_is_visible(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_is_on(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_color(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<45, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_diffuse_multiplier(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<53, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_specular_multiplier(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<56, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_is_ambiant(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<69, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_max_point_distance(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<77, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_PointAttenuationBulbSize(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
								TrUserData);
dfp_read_field_def_light_component_parameters(<<85, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_area_max_distance(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<93, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_area_width(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<101, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_area_height(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<109, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_area_fov(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<117, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_projector_max_distance(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<125, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_projector_attenuation_bulb_size(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
								       TrUserData);
dfp_read_field_def_light_component_parameters(<<133, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_projector_fov(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<141, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_projector_near_plane(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<146, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_probe_area_dimension(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<152, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_probe_sort_priority(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<160, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_probe_box_projected(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<173, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_probe_box_height(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<181, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_probe_box_length(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<189, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_probe_box_width(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<197, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_attenuation_falloff(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<205, 1, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    d_field_light_component_parameters_probe_fade(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_light_component_parameters(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, _) ->
    S1 = #{entity_id => F@_1, is_visible => F@_2, is_on => F@_3, diffuse_multiplier => F@_5, specular_multiplier => F@_6, is_ambiant => F@_7, max_point_distance => F@_8, 'PointAttenuationBulbSize' => F@_9, area_max_distance => F@_10, area_width => F@_11,
	   area_height => F@_12, area_fov => F@_13, projector_max_distance => F@_14, projector_attenuation_bulb_size => F@_15, projector_fov => F@_16, projector_near_plane => F@_17, probe_sort_priority => F@_19, probe_box_projected => F@_20,
	   probe_box_height => F@_21, probe_box_length => F@_22, probe_box_width => F@_23, attenuation_falloff => F@_24, probe_fade => F@_25},
    S2 = if F@_4 == '$undef' -> S1;
	    true -> S1#{color => F@_4}
	 end,
    if F@_18 == '$undef' -> S2;
       true -> S2#{probe_area_dimension => F@_18}
    end;
dfp_read_field_def_light_component_parameters(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    dg_read_field_def_light_component_parameters(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

dg_read_field_def_light_component_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_light_component_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						 TrUserData);
dg_read_field_def_light_component_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_light_component_parameters_entity_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      16 -> d_field_light_component_parameters_is_visible(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      24 -> d_field_light_component_parameters_is_on(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      34 -> d_field_light_component_parameters_color(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      45 -> d_field_light_component_parameters_diffuse_multiplier(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      53 ->
	  d_field_light_component_parameters_specular_multiplier(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      56 -> d_field_light_component_parameters_is_ambiant(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      69 -> d_field_light_component_parameters_max_point_distance(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      77 ->
	  d_field_light_component_parameters_PointAttenuationBulbSize(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      85 -> d_field_light_component_parameters_area_max_distance(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      93 -> d_field_light_component_parameters_area_width(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      101 -> d_field_light_component_parameters_area_height(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      109 -> d_field_light_component_parameters_area_fov(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      117 ->
	  d_field_light_component_parameters_projector_max_distance(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      125 ->
	  d_field_light_component_parameters_projector_attenuation_bulb_size(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
									     TrUserData);
      133 -> d_field_light_component_parameters_projector_fov(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      141 ->
	  d_field_light_component_parameters_projector_near_plane(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      146 ->
	  d_field_light_component_parameters_probe_area_dimension(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      152 ->
	  d_field_light_component_parameters_probe_sort_priority(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      160 ->
	  d_field_light_component_parameters_probe_box_projected(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      173 -> d_field_light_component_parameters_probe_box_height(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      181 -> d_field_light_component_parameters_probe_box_length(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      189 -> d_field_light_component_parameters_probe_box_width(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      197 ->
	  d_field_light_component_parameters_attenuation_falloff(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      205 -> d_field_light_component_parameters_probe_fade(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_light_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
	    1 -> skip_64_light_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
	    2 -> skip_length_delimited_light_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
	    3 -> skip_group_light_component_parameters(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
	    5 -> skip_32_light_component_parameters(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData)
	  end
    end;
dg_read_field_def_light_component_parameters(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, _) ->
    S1 = #{entity_id => F@_1, is_visible => F@_2, is_on => F@_3, diffuse_multiplier => F@_5, specular_multiplier => F@_6, is_ambiant => F@_7, max_point_distance => F@_8, 'PointAttenuationBulbSize' => F@_9, area_max_distance => F@_10, area_width => F@_11,
	   area_height => F@_12, area_fov => F@_13, projector_max_distance => F@_14, projector_attenuation_bulb_size => F@_15, projector_fov => F@_16, projector_near_plane => F@_17, probe_sort_priority => F@_19, probe_box_projected => F@_20,
	   probe_box_height => F@_21, probe_box_length => F@_22, probe_box_width => F@_23, attenuation_falloff => F@_24, probe_fade => F@_25},
    S2 = if F@_4 == '$undef' -> S1;
	    true -> S1#{color => F@_4}
	 end,
    if F@_18 == '$undef' -> S2;
       true -> S2#{probe_area_dimension => F@_18}
    end.

d_field_light_component_parameters_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					     TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						 TrUserData);
d_field_light_component_parameters_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_is_visible(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_is_visible(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_is_visible(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_is_on(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					 TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_is_on(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
d_field_light_component_parameters_is_on(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_color(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					 TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_color(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
d_field_light_component_parameters_color(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					 TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_vector_4(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, F@_1, F@_2, F@_3,
						  if Prev == '$undef' -> NewFValue;
						     true -> merge_msg_vector_4(Prev, NewFValue, TrUserData)
						  end,
						  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_diffuse_multiplier(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						      F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, id(infinity, TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_diffuse_multiplier(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						      F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, id('-infinity', TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_diffuse_multiplier(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
						      F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, id(nan, TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_diffuse_multiplier(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
						      F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, id(Value, TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_specular_multiplier(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
						       F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, id(infinity, TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_specular_multiplier(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
						       F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, id('-infinity', TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_specular_multiplier(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
						       F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, id(nan, TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_specular_multiplier(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
						       F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, id(Value, TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_is_ambiant(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_is_ambiant(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_is_ambiant(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_max_point_distance(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						      F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(infinity, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_max_point_distance(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						      F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id('-infinity', TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_max_point_distance(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
						      F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(nan, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_max_point_distance(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
						      F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(Value, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_PointAttenuationBulbSize(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
							    F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(infinity, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_PointAttenuationBulbSize(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
							    F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id('-infinity', TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_PointAttenuationBulbSize(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
							    F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(nan, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_PointAttenuationBulbSize(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
							    F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(Value, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_area_max_distance(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						     F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(infinity, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_max_distance(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						     F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id('-infinity', TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_max_distance(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
						     F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(nan, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_max_distance(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
						     F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(Value, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_area_width(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(infinity, TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_width(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					      TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id('-infinity', TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_width(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
					      F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(nan, TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_width(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(Value, TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_area_height(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					       TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, id(infinity, TrUserData), F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_height(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					       TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, id('-infinity', TrUserData), F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_height(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
					       F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, id(nan, TrUserData), F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_height(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
					       F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, id(Value, TrUserData), F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_area_fov(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					    TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, id(infinity, TrUserData), F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_fov(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
					    TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, id('-infinity', TrUserData), F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_fov(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
					    F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, id(nan, TrUserData), F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_area_fov(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
					    F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, id(Value, TrUserData), F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_projector_max_distance(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
							  F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, id(infinity, TrUserData), F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_max_distance(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
							  F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, id('-infinity', TrUserData), F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_max_distance(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
							  F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, id(nan, TrUserData), F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_max_distance(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
							  F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, id(Value, TrUserData), F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_projector_attenuation_bulb_size(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
								   F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, id(infinity, TrUserData), F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_attenuation_bulb_size(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
								   F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, id('-infinity', TrUserData), F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_attenuation_bulb_size(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, F@_20,
								   F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, id(nan, TrUserData), F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_attenuation_bulb_size(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
								   F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, id(Value, TrUserData), F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_projector_fov(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						 F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, id(infinity, TrUserData), F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_fov(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						 F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, id('-infinity', TrUserData), F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_fov(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
						 F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, id(nan, TrUserData), F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_fov(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
						 F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, id(Value, TrUserData), F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_projector_near_plane(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
							F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, id(infinity, TrUserData), F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_near_plane(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
							F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, id('-infinity', TrUserData), F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_near_plane(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, F@_20, F@_21, F@_22,
							F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, id(nan, TrUserData), F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_projector_near_plane(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, F@_20, F@_21, F@_22,
							F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, id(Value, TrUserData), F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_probe_area_dimension(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
							F@_25, TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_probe_area_dimension(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
							    TrUserData);
d_field_light_component_parameters_probe_area_dimension(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, Prev, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
							F@_25, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_vector_3(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
						  if Prev == '$undef' -> NewFValue;
						     true -> merge_msg_vector_3(Prev, NewFValue, TrUserData)
						  end,
						  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_probe_sort_priority(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						       F@_25, TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_probe_sort_priority(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
							   TrUserData);
d_field_light_component_parameters_probe_sort_priority(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, _, F@_20, F@_21, F@_22, F@_23, F@_24,
						       F@_25, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, NewFValue, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_probe_box_projected(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
						       F@_25, TrUserData)
    when N < 57 ->
    d_field_light_component_parameters_probe_box_projected(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
							   TrUserData);
d_field_light_component_parameters_probe_box_projected(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, _, F@_21, F@_22, F@_23, F@_24,
						       F@_25, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_light_component_parameters(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, NewFValue, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_light_component_parameters_probe_box_height(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, _, F@_22, F@_23, F@_24,
						    F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, id(infinity, TrUserData), F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_height(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, _, F@_22, F@_23, F@_24,
						    F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, id('-infinity', TrUserData), F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_height(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, _, F@_22,
						    F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, id(nan, TrUserData), F@_22, F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_height(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, _, F@_22, F@_23,
						    F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, id(Value, TrUserData), F@_22, F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_probe_box_length(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, _, F@_23, F@_24,
						    F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, id(infinity, TrUserData), F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_length(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, _, F@_23, F@_24,
						    F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, id('-infinity', TrUserData), F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_length(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, _,
						    F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, id(nan, TrUserData), F@_23, F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_length(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, _, F@_23,
						    F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, id(Value, TrUserData), F@_23, F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_probe_box_width(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, _, F@_24,
						   F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, id(infinity, TrUserData), F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_width(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, _, F@_24,
						   F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, id('-infinity', TrUserData), F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_width(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
						   _, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, id(nan, TrUserData), F@_24, F@_25,
						  TrUserData);
d_field_light_component_parameters_probe_box_width(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, _,
						   F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, id(Value, TrUserData), F@_24, F@_25,
						  TrUserData).

d_field_light_component_parameters_attenuation_falloff(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, _,
						       F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, id(infinity, TrUserData), F@_25,
						  TrUserData);
d_field_light_component_parameters_attenuation_falloff(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, _,
						       F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, id('-infinity', TrUserData), F@_25,
						  TrUserData);
d_field_light_component_parameters_attenuation_falloff(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
						       F@_22, F@_23, _, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, id(nan, TrUserData), F@_25,
						  TrUserData);
d_field_light_component_parameters_attenuation_falloff(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
						       F@_23, _, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, id(Value, TrUserData), F@_25,
						  TrUserData).

d_field_light_component_parameters_probe_fade(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, _,
					      TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, id(infinity, TrUserData),
						  TrUserData);
d_field_light_component_parameters_probe_fade(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, _,
					      TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, id('-infinity', TrUserData),
						  TrUserData);
d_field_light_component_parameters_probe_fade(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
					      F@_24, _, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, id(nan, TrUserData),
						  TrUserData);
d_field_light_component_parameters_probe_fade(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
					      F@_24, _, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, id(Value, TrUserData),
						  TrUserData).

skip_varint_light_component_parameters(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
				       TrUserData) ->
    skip_varint_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
skip_varint_light_component_parameters(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
				       TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

skip_length_delimited_light_component_parameters(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						 TrUserData)
    when N < 57 ->
    skip_length_delimited_light_component_parameters(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						     TrUserData);
skip_length_delimited_light_component_parameters(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_light_component_parameters(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

skip_group_light_component_parameters(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_light_component_parameters(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

skip_32_light_component_parameters(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

skip_64_light_component_parameters(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    dfp_read_field_def_light_component_parameters(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

decode_msg_m_entity_id(Bin, TrUserData) -> dfp_read_field_def_m_entity_id(Bin, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_m_entity_id(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_m_entity_id_entity_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_m_entity_id(<<>>, 0, 0, F@_1, _) -> #{entity_id => F@_1};
dfp_read_field_def_m_entity_id(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_m_entity_id(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_m_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_m_entity_id_entity_id(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_m_entity_id(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_m_entity_id(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_m_entity_id(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_m_entity_id(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_m_entity_id(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_entity_id(<<>>, 0, 0, F@_1, _) -> #{entity_id => F@_1}.

d_field_m_entity_id_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_m_entity_id_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_m_entity_id_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) -> {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest}, dfp_read_field_def_m_entity_id(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_m_entity_id(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_m_entity_id(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_m_entity_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_m_entity_id(Rest2, 0, 0, F@_1, TrUserData).

skip_group_m_entity_id(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_m_entity_id(Rest, 0, Z2, F@_1, TrUserData).

skip_32_m_entity_id(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_m_entity_id(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_m_entity_id(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_generic_result_code(Bin, TrUserData) -> dfp_read_field_def_generic_result_code(Bin, 0, 0, id(ok, TrUserData), TrUserData).

dfp_read_field_def_generic_result_code(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_generic_result_code_result_code(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_generic_result_code(<<>>, 0, 0, F@_1, _) -> #{result_code => F@_1};
dfp_read_field_def_generic_result_code(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_generic_result_code(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_generic_result_code(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_generic_result_code(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_generic_result_code(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_generic_result_code_result_code(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_generic_result_code(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_generic_result_code(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_generic_result_code(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_generic_result_code(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_generic_result_code(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_generic_result_code(<<>>, 0, 0, F@_1, _) -> #{result_code => F@_1}.

d_field_generic_result_code_result_code(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_generic_result_code_result_code(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_generic_result_code_result_code(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_generic_result_code.enum_generic_result_code'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_generic_result_code(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_generic_result_code(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_generic_result_code(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_generic_result_code(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_generic_result_code(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_generic_result_code(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_generic_result_code(Rest2, 0, 0, F@_1, TrUserData).

skip_group_generic_result_code(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_generic_result_code(Rest, 0, Z2, F@_1, TrUserData).

skip_32_generic_result_code(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_generic_result_code(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_generic_result_code(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_vector_3(Bin, TrUserData) -> dfp_read_field_def_vector_3(Bin, 0, 0, id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_vector_3(<<13, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_vector_3_x(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_vector_3(<<21, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_vector_3_y(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_vector_3(<<29, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_vector_3_z(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_vector_3(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{x => F@_1, y => F@_2, z => F@_3};
dfp_read_field_def_vector_3(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_vector_3(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_vector_3(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_vector_3(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_vector_3(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 -> d_field_vector_3_x(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      21 -> d_field_vector_3_y(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      29 -> d_field_vector_3_z(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_vector_3(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_vector_3(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_vector_3(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{x => F@_1, y => F@_2, z => F@_3}.

d_field_vector_3_x(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id(infinity, TrUserData), F@_2, F@_3, TrUserData);
d_field_vector_3_x(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id('-infinity', TrUserData), F@_2, F@_3, TrUserData);
d_field_vector_3_x(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id(nan, TrUserData), F@_2, F@_3, TrUserData);
d_field_vector_3_x(<<Value:32/little-float, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, id(Value, TrUserData), F@_2, F@_3, TrUserData).

d_field_vector_3_y(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id(infinity, TrUserData), F@_3, TrUserData);
d_field_vector_3_y(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id('-infinity', TrUserData), F@_3, TrUserData);
d_field_vector_3_y(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id(nan, TrUserData), F@_3, TrUserData);
d_field_vector_3_y(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, id(Value, TrUserData), F@_3, TrUserData).

d_field_vector_3_z(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id(infinity, TrUserData), TrUserData);
d_field_vector_3_z(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id('-infinity', TrUserData), TrUserData);
d_field_vector_3_z(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id(nan, TrUserData), TrUserData);
d_field_vector_3_z(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, id(Value, TrUserData), TrUserData).

skip_varint_vector_3(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_vector_3(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_vector_3(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_vector_3(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_vector_3(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_vector_3(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_vector_3(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_vector_3(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_vector_3(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_vector_3(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_vector_3(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_vector_4(Bin, TrUserData) -> dfp_read_field_def_vector_4(Bin, 0, 0, id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_vector_4(<<13, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_w(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<21, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_x(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<29, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_y(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<37, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_vector_4_z(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_vector_4(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #{w => F@_1, x => F@_2, y => F@_3, z => F@_4};
dfp_read_field_def_vector_4(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_vector_4(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_vector_4(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_vector_4(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_vector_4(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 -> d_field_vector_4_w(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      21 -> d_field_vector_4_x(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      29 -> d_field_vector_4_y(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      37 -> d_field_vector_4_z(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    1 -> skip_64_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    2 -> skip_length_delimited_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    3 -> skip_group_vector_4(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    5 -> skip_32_vector_4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_vector_4(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #{w => F@_1, x => F@_2, y => F@_3, z => F@_4}.

d_field_vector_4_w(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id(infinity, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_vector_4_w(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id('-infinity', TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_vector_4_w(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id(nan, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_vector_4_w(<<Value:32/little-float, Rest/binary>>, Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, id(Value, TrUserData), F@_2, F@_3, F@_4, TrUserData).

d_field_vector_4_x(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id(infinity, TrUserData), F@_3, F@_4, TrUserData);
d_field_vector_4_x(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id('-infinity', TrUserData), F@_3, F@_4, TrUserData);
d_field_vector_4_x(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id(nan, TrUserData), F@_3, F@_4, TrUserData);
d_field_vector_4_x(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, id(Value, TrUserData), F@_3, F@_4, TrUserData).

d_field_vector_4_y(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id(infinity, TrUserData), F@_4, TrUserData);
d_field_vector_4_y(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id('-infinity', TrUserData), F@_4, TrUserData);
d_field_vector_4_y(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id(nan, TrUserData), F@_4, TrUserData);
d_field_vector_4_y(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, id(Value, TrUserData), F@_4, TrUserData).

d_field_vector_4_z(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(infinity, TrUserData), TrUserData);
d_field_vector_4_z(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id('-infinity', TrUserData), TrUserData);
d_field_vector_4_z(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(nan, TrUserData), TrUserData);
d_field_vector_4_z(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(Value, TrUserData), TrUserData).

skip_varint_vector_4(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_vector_4(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_vector_4(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_vector_4(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_vector_4(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_vector_4(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_vector_4(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_vector_4(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_vector_4(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_vector_4(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_vector_4(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

'd_enum_generic_result_code.enum_generic_result_code'(0) -> ok;
'd_enum_generic_result_code.enum_generic_result_code'(1) -> failed;
'd_enum_generic_result_code.enum_generic_result_code'(2) -> not_found;
'd_enum_generic_result_code.enum_generic_result_code'(3) -> invalid_parameter;
'd_enum_generic_result_code.enum_generic_result_code'(4) -> unimplemented;
'd_enum_generic_result_code.enum_generic_result_code'(5) -> deactivate_first;
'd_enum_generic_result_code.enum_generic_result_code'(6) -> activate_first;
'd_enum_generic_result_code.enum_generic_result_code'(7) -> entity_not_initialised;
'd_enum_generic_result_code.enum_generic_result_code'(8) -> component_already_exists;
'd_enum_generic_result_code.enum_generic_result_code'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      light_component_parameters -> merge_msg_light_component_parameters(Prev, New, TrUserData);
      m_entity_id -> merge_msg_m_entity_id(Prev, New, TrUserData);
      generic_result_code -> merge_msg_generic_result_code(Prev, New, TrUserData);
      vector_3 -> merge_msg_vector_3(Prev, New, TrUserData);
      vector_4 -> merge_msg_vector_4(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_light_component_parameters/3}).
merge_msg_light_component_parameters(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{entity_id := NFentity_id}} -> S1#{entity_id => NFentity_id};
	   {#{entity_id := PFentity_id}, _} -> S1#{entity_id => PFentity_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{is_visible := NFis_visible}} -> S2#{is_visible => NFis_visible};
	   {#{is_visible := PFis_visible}, _} -> S2#{is_visible => PFis_visible};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{is_on := NFis_on}} -> S3#{is_on => NFis_on};
	   {#{is_on := PFis_on}, _} -> S3#{is_on => PFis_on};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{color := PFcolor}, #{color := NFcolor}} -> S4#{color => merge_msg_vector_4(PFcolor, NFcolor, TrUserData)};
	   {_, #{color := NFcolor}} -> S4#{color => NFcolor};
	   {#{color := PFcolor}, _} -> S4#{color => PFcolor};
	   {_, _} -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{diffuse_multiplier := NFdiffuse_multiplier}} -> S5#{diffuse_multiplier => NFdiffuse_multiplier};
	   {#{diffuse_multiplier := PFdiffuse_multiplier}, _} -> S5#{diffuse_multiplier => PFdiffuse_multiplier};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{specular_multiplier := NFspecular_multiplier}} -> S6#{specular_multiplier => NFspecular_multiplier};
	   {#{specular_multiplier := PFspecular_multiplier}, _} -> S6#{specular_multiplier => PFspecular_multiplier};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{is_ambiant := NFis_ambiant}} -> S7#{is_ambiant => NFis_ambiant};
	   {#{is_ambiant := PFis_ambiant}, _} -> S7#{is_ambiant => PFis_ambiant};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {_, #{max_point_distance := NFmax_point_distance}} -> S8#{max_point_distance => NFmax_point_distance};
	   {#{max_point_distance := PFmax_point_distance}, _} -> S8#{max_point_distance => PFmax_point_distance};
	   _ -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {_, #{'PointAttenuationBulbSize' := NFPointAttenuationBulbSize}} -> S9#{'PointAttenuationBulbSize' => NFPointAttenuationBulbSize};
	    {#{'PointAttenuationBulbSize' := PFPointAttenuationBulbSize}, _} -> S9#{'PointAttenuationBulbSize' => PFPointAttenuationBulbSize};
	    _ -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {_, #{area_max_distance := NFarea_max_distance}} -> S10#{area_max_distance => NFarea_max_distance};
	    {#{area_max_distance := PFarea_max_distance}, _} -> S10#{area_max_distance => PFarea_max_distance};
	    _ -> S10
	  end,
    S12 = case {PMsg, NMsg} of
	    {_, #{area_width := NFarea_width}} -> S11#{area_width => NFarea_width};
	    {#{area_width := PFarea_width}, _} -> S11#{area_width => PFarea_width};
	    _ -> S11
	  end,
    S13 = case {PMsg, NMsg} of
	    {_, #{area_height := NFarea_height}} -> S12#{area_height => NFarea_height};
	    {#{area_height := PFarea_height}, _} -> S12#{area_height => PFarea_height};
	    _ -> S12
	  end,
    S14 = case {PMsg, NMsg} of
	    {_, #{area_fov := NFarea_fov}} -> S13#{area_fov => NFarea_fov};
	    {#{area_fov := PFarea_fov}, _} -> S13#{area_fov => PFarea_fov};
	    _ -> S13
	  end,
    S15 = case {PMsg, NMsg} of
	    {_, #{projector_max_distance := NFprojector_max_distance}} -> S14#{projector_max_distance => NFprojector_max_distance};
	    {#{projector_max_distance := PFprojector_max_distance}, _} -> S14#{projector_max_distance => PFprojector_max_distance};
	    _ -> S14
	  end,
    S16 = case {PMsg, NMsg} of
	    {_, #{projector_attenuation_bulb_size := NFprojector_attenuation_bulb_size}} -> S15#{projector_attenuation_bulb_size => NFprojector_attenuation_bulb_size};
	    {#{projector_attenuation_bulb_size := PFprojector_attenuation_bulb_size}, _} -> S15#{projector_attenuation_bulb_size => PFprojector_attenuation_bulb_size};
	    _ -> S15
	  end,
    S17 = case {PMsg, NMsg} of
	    {_, #{projector_fov := NFprojector_fov}} -> S16#{projector_fov => NFprojector_fov};
	    {#{projector_fov := PFprojector_fov}, _} -> S16#{projector_fov => PFprojector_fov};
	    _ -> S16
	  end,
    S18 = case {PMsg, NMsg} of
	    {_, #{projector_near_plane := NFprojector_near_plane}} -> S17#{projector_near_plane => NFprojector_near_plane};
	    {#{projector_near_plane := PFprojector_near_plane}, _} -> S17#{projector_near_plane => PFprojector_near_plane};
	    _ -> S17
	  end,
    S19 = case {PMsg, NMsg} of
	    {#{probe_area_dimension := PFprobe_area_dimension}, #{probe_area_dimension := NFprobe_area_dimension}} -> S18#{probe_area_dimension => merge_msg_vector_3(PFprobe_area_dimension, NFprobe_area_dimension, TrUserData)};
	    {_, #{probe_area_dimension := NFprobe_area_dimension}} -> S18#{probe_area_dimension => NFprobe_area_dimension};
	    {#{probe_area_dimension := PFprobe_area_dimension}, _} -> S18#{probe_area_dimension => PFprobe_area_dimension};
	    {_, _} -> S18
	  end,
    S20 = case {PMsg, NMsg} of
	    {_, #{probe_sort_priority := NFprobe_sort_priority}} -> S19#{probe_sort_priority => NFprobe_sort_priority};
	    {#{probe_sort_priority := PFprobe_sort_priority}, _} -> S19#{probe_sort_priority => PFprobe_sort_priority};
	    _ -> S19
	  end,
    S21 = case {PMsg, NMsg} of
	    {_, #{probe_box_projected := NFprobe_box_projected}} -> S20#{probe_box_projected => NFprobe_box_projected};
	    {#{probe_box_projected := PFprobe_box_projected}, _} -> S20#{probe_box_projected => PFprobe_box_projected};
	    _ -> S20
	  end,
    S22 = case {PMsg, NMsg} of
	    {_, #{probe_box_height := NFprobe_box_height}} -> S21#{probe_box_height => NFprobe_box_height};
	    {#{probe_box_height := PFprobe_box_height}, _} -> S21#{probe_box_height => PFprobe_box_height};
	    _ -> S21
	  end,
    S23 = case {PMsg, NMsg} of
	    {_, #{probe_box_length := NFprobe_box_length}} -> S22#{probe_box_length => NFprobe_box_length};
	    {#{probe_box_length := PFprobe_box_length}, _} -> S22#{probe_box_length => PFprobe_box_length};
	    _ -> S22
	  end,
    S24 = case {PMsg, NMsg} of
	    {_, #{probe_box_width := NFprobe_box_width}} -> S23#{probe_box_width => NFprobe_box_width};
	    {#{probe_box_width := PFprobe_box_width}, _} -> S23#{probe_box_width => PFprobe_box_width};
	    _ -> S23
	  end,
    S25 = case {PMsg, NMsg} of
	    {_, #{attenuation_falloff := NFattenuation_falloff}} -> S24#{attenuation_falloff => NFattenuation_falloff};
	    {#{attenuation_falloff := PFattenuation_falloff}, _} -> S24#{attenuation_falloff => PFattenuation_falloff};
	    _ -> S24
	  end,
    case {PMsg, NMsg} of
      {_, #{probe_fade := NFprobe_fade}} -> S25#{probe_fade => NFprobe_fade};
      {#{probe_fade := PFprobe_fade}, _} -> S25#{probe_fade => PFprobe_fade};
      _ -> S25
    end.

-compile({nowarn_unused_function,merge_msg_m_entity_id/3}).
merge_msg_m_entity_id(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{entity_id := NFentity_id}} -> S1#{entity_id => NFentity_id};
      {#{entity_id := PFentity_id}, _} -> S1#{entity_id => PFentity_id};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_generic_result_code/3}).
merge_msg_generic_result_code(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{result_code := NFresult_code}} -> S1#{result_code => NFresult_code};
      {#{result_code := PFresult_code}, _} -> S1#{result_code => PFresult_code};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_vector_3/3}).
merge_msg_vector_3(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{x := NFx}} -> S1#{x => NFx};
	   {#{x := PFx}, _} -> S1#{x => PFx};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{y := NFy}} -> S2#{y => NFy};
	   {#{y := PFy}, _} -> S2#{y => PFy};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{z := NFz}} -> S3#{z => NFz};
      {#{z := PFz}, _} -> S3#{z => PFz};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_vector_4/3}).
merge_msg_vector_4(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{w := NFw}} -> S1#{w => NFw};
	   {#{w := PFw}, _} -> S1#{w => PFw};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{x := NFx}} -> S2#{x => NFx};
	   {#{x := PFx}, _} -> S2#{x => PFx};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{y := NFy}} -> S3#{y => NFy};
	   {#{y := PFy}, _} -> S3#{y => PFy};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{z := NFz}} -> S4#{z => NFz};
      {#{z := PFz}, _} -> S4#{z => PFz};
      _ -> S4
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      light_component_parameters -> v_msg_light_component_parameters(Msg, [MsgName], TrUserData);
      m_entity_id -> v_msg_m_entity_id(Msg, [MsgName], TrUserData);
      generic_result_code -> v_msg_generic_result_code(Msg, [MsgName], TrUserData);
      vector_3 -> v_msg_vector_3(Msg, [MsgName], TrUserData);
      vector_4 -> v_msg_vector_4(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_light_component_parameters/3}).
-dialyzer({nowarn_function,v_msg_light_component_parameters/3}).
v_msg_light_component_parameters(#{} = M, Path, TrUserData) ->
    case M of
      #{entity_id := F1} -> v_type_uint64(F1, [entity_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{is_visible := F2} -> v_type_bool(F2, [is_visible | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{is_on := F3} -> v_type_bool(F3, [is_on | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{color := F4} -> v_msg_vector_4(F4, [color | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{diffuse_multiplier := F5} -> v_type_float(F5, [diffuse_multiplier | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{specular_multiplier := F6} -> v_type_float(F6, [specular_multiplier | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{is_ambiant := F7} -> v_type_bool(F7, [is_ambiant | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{max_point_distance := F8} -> v_type_float(F8, [max_point_distance | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'PointAttenuationBulbSize' := F9} -> v_type_float(F9, ['PointAttenuationBulbSize' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{area_max_distance := F10} -> v_type_float(F10, [area_max_distance | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{area_width := F11} -> v_type_float(F11, [area_width | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{area_height := F12} -> v_type_float(F12, [area_height | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{area_fov := F13} -> v_type_float(F13, [area_fov | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{projector_max_distance := F14} -> v_type_float(F14, [projector_max_distance | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{projector_attenuation_bulb_size := F15} -> v_type_float(F15, [projector_attenuation_bulb_size | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{projector_fov := F16} -> v_type_float(F16, [projector_fov | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{projector_near_plane := F17} -> v_type_float(F17, [projector_near_plane | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{probe_area_dimension := F18} -> v_msg_vector_3(F18, [probe_area_dimension | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{probe_sort_priority := F19} -> v_type_uint32(F19, [probe_sort_priority | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{probe_box_projected := F20} -> v_type_bool(F20, [probe_box_projected | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{probe_box_height := F21} -> v_type_float(F21, [probe_box_height | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{probe_box_length := F22} -> v_type_float(F22, [probe_box_length | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{probe_box_width := F23} -> v_type_float(F23, [probe_box_width | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{attenuation_falloff := F24} -> v_type_float(F24, [attenuation_falloff | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{probe_fade := F25} -> v_type_float(F25, [probe_fade | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (entity_id) -> ok;
		      (is_visible) -> ok;
		      (is_on) -> ok;
		      (color) -> ok;
		      (diffuse_multiplier) -> ok;
		      (specular_multiplier) -> ok;
		      (is_ambiant) -> ok;
		      (max_point_distance) -> ok;
		      ('PointAttenuationBulbSize') -> ok;
		      (area_max_distance) -> ok;
		      (area_width) -> ok;
		      (area_height) -> ok;
		      (area_fov) -> ok;
		      (projector_max_distance) -> ok;
		      (projector_attenuation_bulb_size) -> ok;
		      (projector_fov) -> ok;
		      (projector_near_plane) -> ok;
		      (probe_area_dimension) -> ok;
		      (probe_sort_priority) -> ok;
		      (probe_box_projected) -> ok;
		      (probe_box_height) -> ok;
		      (probe_box_length) -> ok;
		      (probe_box_width) -> ok;
		      (attenuation_falloff) -> ok;
		      (probe_fade) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_light_component_parameters(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), light_component_parameters}, M, Path);
v_msg_light_component_parameters(X, Path, _TrUserData) -> mk_type_error({expected_msg, light_component_parameters}, X, Path).

-compile({nowarn_unused_function,v_msg_m_entity_id/3}).
-dialyzer({nowarn_function,v_msg_m_entity_id/3}).
v_msg_m_entity_id(#{} = M, Path, TrUserData) ->
    case M of
      #{entity_id := F1} -> v_type_uint64(F1, [entity_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (entity_id) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_m_entity_id(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), m_entity_id}, M, Path);
v_msg_m_entity_id(X, Path, _TrUserData) -> mk_type_error({expected_msg, m_entity_id}, X, Path).

-compile({nowarn_unused_function,v_msg_generic_result_code/3}).
-dialyzer({nowarn_function,v_msg_generic_result_code/3}).
v_msg_generic_result_code(#{} = M, Path, TrUserData) ->
    case M of
      #{result_code := F1} -> 'v_enum_generic_result_code.enum_generic_result_code'(F1, [result_code | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (result_code) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_generic_result_code(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), generic_result_code}, M, Path);
v_msg_generic_result_code(X, Path, _TrUserData) -> mk_type_error({expected_msg, generic_result_code}, X, Path).

-compile({nowarn_unused_function,v_msg_vector_3/3}).
-dialyzer({nowarn_function,v_msg_vector_3/3}).
v_msg_vector_3(#{} = M, Path, TrUserData) ->
    case M of
      #{x := F1} -> v_type_float(F1, [x | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{y := F2} -> v_type_float(F2, [y | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{z := F3} -> v_type_float(F3, [z | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (x) -> ok;
		      (y) -> ok;
		      (z) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_vector_3(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), vector_3}, M, Path);
v_msg_vector_3(X, Path, _TrUserData) -> mk_type_error({expected_msg, vector_3}, X, Path).

-compile({nowarn_unused_function,v_msg_vector_4/3}).
-dialyzer({nowarn_function,v_msg_vector_4/3}).
v_msg_vector_4(#{} = M, Path, TrUserData) ->
    case M of
      #{w := F1} -> v_type_float(F1, [w | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{x := F2} -> v_type_float(F2, [x | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{y := F3} -> v_type_float(F3, [y | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{z := F4} -> v_type_float(F4, [z | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (w) -> ok;
		      (x) -> ok;
		      (y) -> ok;
		      (z) -> ok;
		      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_vector_4(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), vector_4}, M, Path);
v_msg_vector_4(X, Path, _TrUserData) -> mk_type_error({expected_msg, vector_4}, X, Path).

-compile({nowarn_unused_function,'v_enum_generic_result_code.enum_generic_result_code'/3}).
-dialyzer({nowarn_function,'v_enum_generic_result_code.enum_generic_result_code'/3}).
'v_enum_generic_result_code.enum_generic_result_code'(ok, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(failed, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(not_found, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(invalid_parameter, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(unimplemented, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(deactivate_first, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(activate_first, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(entity_not_initialised, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(component_already_exists, _Path, _TrUserData) -> ok;
'v_enum_generic_result_code.enum_generic_result_code'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_generic_result_code.enum_generic_result_code'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'generic_result_code.enum_generic_result_code'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) -> mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) -> Path2 = prettify_path(Path), erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'generic_result_code.enum_generic_result_code'}, [{ok, 0}, {failed, 1}, {not_found, 2}, {invalid_parameter, 3}, {unimplemented, 4}, {deactivate_first, 5}, {activate_first, 6}, {entity_not_initialised, 7}, {component_already_exists, 8}]},
     {{msg, light_component_parameters},
      [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}, #{name => is_visible, fnum => 2, rnum => 3, type => bool, occurrence => optional, opts => []},
       #{name => is_on, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []}, #{name => color, fnum => 4, rnum => 5, type => {msg, vector_4}, occurrence => optional, opts => []},
       #{name => diffuse_multiplier, fnum => 5, rnum => 6, type => float, occurrence => optional, opts => []}, #{name => specular_multiplier, fnum => 6, rnum => 7, type => float, occurrence => optional, opts => []},
       #{name => is_ambiant, fnum => 7, rnum => 8, type => bool, occurrence => optional, opts => []}, #{name => max_point_distance, fnum => 8, rnum => 9, type => float, occurrence => optional, opts => []},
       #{name => 'PointAttenuationBulbSize', fnum => 9, rnum => 10, type => float, occurrence => optional, opts => []}, #{name => area_max_distance, fnum => 10, rnum => 11, type => float, occurrence => optional, opts => []},
       #{name => area_width, fnum => 11, rnum => 12, type => float, occurrence => optional, opts => []}, #{name => area_height, fnum => 12, rnum => 13, type => float, occurrence => optional, opts => []},
       #{name => area_fov, fnum => 13, rnum => 14, type => float, occurrence => optional, opts => []}, #{name => projector_max_distance, fnum => 14, rnum => 15, type => float, occurrence => optional, opts => []},
       #{name => projector_attenuation_bulb_size, fnum => 15, rnum => 16, type => float, occurrence => optional, opts => []}, #{name => projector_fov, fnum => 16, rnum => 17, type => float, occurrence => optional, opts => []},
       #{name => projector_near_plane, fnum => 17, rnum => 18, type => float, occurrence => optional, opts => []}, #{name => probe_area_dimension, fnum => 18, rnum => 19, type => {msg, vector_3}, occurrence => optional, opts => []},
       #{name => probe_sort_priority, fnum => 19, rnum => 20, type => uint32, occurrence => optional, opts => []}, #{name => probe_box_projected, fnum => 20, rnum => 21, type => bool, occurrence => optional, opts => []},
       #{name => probe_box_height, fnum => 21, rnum => 22, type => float, occurrence => optional, opts => []}, #{name => probe_box_length, fnum => 22, rnum => 23, type => float, occurrence => optional, opts => []},
       #{name => probe_box_width, fnum => 23, rnum => 24, type => float, occurrence => optional, opts => []}, #{name => attenuation_falloff, fnum => 24, rnum => 25, type => float, occurrence => optional, opts => []},
       #{name => probe_fade, fnum => 25, rnum => 26, type => float, occurrence => optional, opts => []}]},
     {{msg, m_entity_id}, [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}]},
     {{msg, generic_result_code}, [#{name => result_code, fnum => 1, rnum => 2, type => {enum, 'generic_result_code.enum_generic_result_code'}, occurrence => optional, opts => []}]},
     {{msg, vector_3},
      [#{name => x, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => y, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
       #{name => z, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}]},
     {{msg, vector_4},
      [#{name => w, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => x, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
       #{name => y, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}, #{name => z, fnum => 4, rnum => 5, type => float, occurrence => optional, opts => []}]}].


get_msg_names() -> [light_component_parameters, m_entity_id, generic_result_code, vector_3, vector_4].


get_group_names() -> [].


get_msg_or_group_names() -> [light_component_parameters, m_entity_id, generic_result_code, vector_3, vector_4].


get_enum_names() -> ['generic_result_code.enum_generic_result_code'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(light_component_parameters) ->
    [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}, #{name => is_visible, fnum => 2, rnum => 3, type => bool, occurrence => optional, opts => []},
     #{name => is_on, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []}, #{name => color, fnum => 4, rnum => 5, type => {msg, vector_4}, occurrence => optional, opts => []},
     #{name => diffuse_multiplier, fnum => 5, rnum => 6, type => float, occurrence => optional, opts => []}, #{name => specular_multiplier, fnum => 6, rnum => 7, type => float, occurrence => optional, opts => []},
     #{name => is_ambiant, fnum => 7, rnum => 8, type => bool, occurrence => optional, opts => []}, #{name => max_point_distance, fnum => 8, rnum => 9, type => float, occurrence => optional, opts => []},
     #{name => 'PointAttenuationBulbSize', fnum => 9, rnum => 10, type => float, occurrence => optional, opts => []}, #{name => area_max_distance, fnum => 10, rnum => 11, type => float, occurrence => optional, opts => []},
     #{name => area_width, fnum => 11, rnum => 12, type => float, occurrence => optional, opts => []}, #{name => area_height, fnum => 12, rnum => 13, type => float, occurrence => optional, opts => []},
     #{name => area_fov, fnum => 13, rnum => 14, type => float, occurrence => optional, opts => []}, #{name => projector_max_distance, fnum => 14, rnum => 15, type => float, occurrence => optional, opts => []},
     #{name => projector_attenuation_bulb_size, fnum => 15, rnum => 16, type => float, occurrence => optional, opts => []}, #{name => projector_fov, fnum => 16, rnum => 17, type => float, occurrence => optional, opts => []},
     #{name => projector_near_plane, fnum => 17, rnum => 18, type => float, occurrence => optional, opts => []}, #{name => probe_area_dimension, fnum => 18, rnum => 19, type => {msg, vector_3}, occurrence => optional, opts => []},
     #{name => probe_sort_priority, fnum => 19, rnum => 20, type => uint32, occurrence => optional, opts => []}, #{name => probe_box_projected, fnum => 20, rnum => 21, type => bool, occurrence => optional, opts => []},
     #{name => probe_box_height, fnum => 21, rnum => 22, type => float, occurrence => optional, opts => []}, #{name => probe_box_length, fnum => 22, rnum => 23, type => float, occurrence => optional, opts => []},
     #{name => probe_box_width, fnum => 23, rnum => 24, type => float, occurrence => optional, opts => []}, #{name => attenuation_falloff, fnum => 24, rnum => 25, type => float, occurrence => optional, opts => []},
     #{name => probe_fade, fnum => 25, rnum => 26, type => float, occurrence => optional, opts => []}];
find_msg_def(m_entity_id) -> [#{name => entity_id, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}];
find_msg_def(generic_result_code) -> [#{name => result_code, fnum => 1, rnum => 2, type => {enum, 'generic_result_code.enum_generic_result_code'}, occurrence => optional, opts => []}];
find_msg_def(vector_3) ->
    [#{name => x, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => y, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
     #{name => z, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}];
find_msg_def(vector_4) ->
    [#{name => w, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []}, #{name => x, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
     #{name => y, fnum => 3, rnum => 4, type => float, occurrence => optional, opts => []}, #{name => z, fnum => 4, rnum => 5, type => float, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('generic_result_code.enum_generic_result_code') ->
    [{ok, 0}, {failed, 1}, {not_found, 2}, {invalid_parameter, 3}, {unimplemented, 4}, {deactivate_first, 5}, {activate_first, 6}, {entity_not_initialised, 7}, {component_already_exists, 8}];
find_enum_def(_) -> error.


enum_symbol_by_value('generic_result_code.enum_generic_result_code', Value) -> 'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(Value).


enum_value_by_symbol('generic_result_code.enum_generic_result_code', Sym) -> 'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(Sym).


'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(0) -> ok;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(1) -> failed;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(2) -> not_found;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(3) -> invalid_parameter;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(4) -> unimplemented;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(5) -> deactivate_first;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(6) -> activate_first;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(7) -> entity_not_initialised;
'enum_symbol_by_value_generic_result_code.enum_generic_result_code'(8) -> component_already_exists.


'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(ok) -> 0;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(failed) -> 1;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(not_found) -> 2;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(invalid_parameter) -> 3;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(unimplemented) -> 4;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(deactivate_first) -> 5;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(activate_first) -> 6;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(entity_not_initialised) -> 7;
'enum_value_by_symbol_generic_result_code.enum_generic_result_code'(component_already_exists) -> 8.


get_service_names() -> ['eGem.light_service'].


get_service_def('eGem.light_service') ->
    {{service, 'eGem.light_service'},
     [#{name => add_light_component, input => light_component_parameters, output => generic_result_code, input_stream => false, output_stream => false, opts => []},
      #{name => remove_light_components, input => m_entity_id, output => generic_result_code, input_stream => false, output_stream => false, opts => []},
      #{name => update_light_status, input => light_component_parameters, output => generic_result_code, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('eGem.light_service') -> [add_light_component, remove_light_components, update_light_status];
get_rpc_names(_) -> error.


find_rpc_def('eGem.light_service', RpcName) -> 'find_rpc_def_eGem.light_service'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_eGem.light_service'(add_light_component) -> #{name => add_light_component, input => light_component_parameters, output => generic_result_code, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_eGem.light_service'(remove_light_components) -> #{name => remove_light_components, input => m_entity_id, output => generic_result_code, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_eGem.light_service'(update_light_status) -> #{name => update_light_status, input => light_component_parameters, output => generic_result_code, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_eGem.light_service'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"eGem.light_service">>) -> 'eGem.light_service';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('eGem.light_service') -> <<"eGem.light_service">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"eGem.light_service">>, <<"add_light_component">>) -> {'eGem.light_service', add_light_component};
fqbins_to_service_and_rpc_name(<<"eGem.light_service">>, <<"remove_light_components">>) -> {'eGem.light_service', remove_light_components};
fqbins_to_service_and_rpc_name(<<"eGem.light_service">>, <<"update_light_status">>) -> {'eGem.light_service', update_light_status};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('eGem.light_service', add_light_component) -> {<<"eGem.light_service">>, <<"add_light_component">>};
service_and_rpc_name_to_fqbins('eGem.light_service', remove_light_components) -> {<<"eGem.light_service">>, <<"remove_light_components">>};
service_and_rpc_name_to_fqbins('eGem.light_service', update_light_status) -> {<<"eGem.light_service">>, <<"update_light_status">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"eGem.light_component_parameters">>) -> light_component_parameters;
fqbin_to_msg_name(<<"eGem.m_entity_id">>) -> m_entity_id;
fqbin_to_msg_name(<<"eGem.generic_result_code">>) -> generic_result_code;
fqbin_to_msg_name(<<"eGem.vector3">>) -> vector_3;
fqbin_to_msg_name(<<"eGem.vector4">>) -> vector_4;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(light_component_parameters) -> <<"eGem.light_component_parameters">>;
msg_name_to_fqbin(m_entity_id) -> <<"eGem.m_entity_id">>;
msg_name_to_fqbin(generic_result_code) -> <<"eGem.generic_result_code">>;
msg_name_to_fqbin(vector_3) -> <<"eGem.vector3">>;
msg_name_to_fqbin(vector_4) -> <<"eGem.vector4">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"eGem.generic_result_code.enum_generic_result_code">>) -> 'generic_result_code.enum_generic_result_code';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('generic_result_code.enum_generic_result_code') -> <<"eGem.generic_result_code.enum_generic_result_code">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> eGem.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "light_service.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["light_service.proto", "global_defs.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["light_service", "global_defs"].


get_msg_containment("light_service") -> [light_component_parameters];
get_msg_containment("global_defs") -> [generic_result_code, m_entity_id, vector_3, vector_4];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("light_service") -> eGem;
get_pkg_containment("global_defs") -> eGem;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("light_service") -> ['eGem.light_service'];
get_service_containment("global_defs") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("light_service") -> [{'eGem.light_service', add_light_component}, {'eGem.light_service', remove_light_components}, {'eGem.light_service', update_light_status}];
get_rpc_containment("global_defs") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("light_service") -> [];
get_enum_containment("global_defs") -> ['generic_result_code.enum_generic_result_code'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"eGem.vector3">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(<<"eGem.light_component_parameters">>) -> "light_service";
get_proto_by_msg_name_as_fqbin(<<"eGem.vector4">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(<<"eGem.m_entity_id">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(<<"eGem.generic_result_code">>) -> "global_defs";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"eGem.light_service">>) -> "light_service";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"eGem.generic_result_code.enum_generic_result_code">>) -> "global_defs";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"eGem">>) -> ["global_defs", "light_service"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.12.0".

gpb_version_as_list() ->
    [4,12,0].
